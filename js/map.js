//16/02/2018 10:56

//TO DO:
// - Update JSON sur localisation
// - Clusters  âœ”
// - Update JSON on marker click ~
// - Mettre en place icon / photo

//############################################################//
// Variables

var googlePlacesAPIService; // Service for API request executions

var userCoordinates;        // User's coordinates

var searchOptions = 0;      // Search options: 0 = no filter ; 1 = Bars ; 2 = Restaurants

var map;                    // The map generated by mapbox

var userPositionMarker;     // Marker associated with user's location

var placesRequest;          // Google places API request

var placeInformations;      // Informations about places: contains ID, latitude and longitude, address, rating, name, etc...

var JSONSaveFileName = "";  // Name of the JSON data file

var JSONFile;               // File that store JSON data

var geoJSON = "";			// Geojson

var locationsMarkers = [];  // Array with allthe markers

var requestItemsNumber;     // Number of items requested

var counter;                // Simple counter for tasks

var fetchedBars = [];

var fetchedRestaurants = [];

var fetchedBarRestaurants = [];

var barsString = "";

var restaurantsString = "";

var barsRestaurantsString = "";

var latVariance = 0.001764; // Latitude difference to get to an other sector // Base = 0.000882

var lngVariance = 0.002560; // Longitude difference to get to an other sector // Base = 0.001280

var mapGridBounds = {

	topLatitude : 45.788347,

	bottomLatitude : 45.732777,

	leftLongitute : 4.791173,

	rightLongitude : 4.871854

};

var numberOfItemsOnLatitude = Math.round( ( mapGridBounds.topLatitude - mapGridBounds.bottomLatitude ) / latVariance );

var numberOfItemsOnLongitude = Math.round( ( mapGridBounds.rightLongitude - mapGridBounds.leftLongitute ) / lngVariance );

//############################################################//
//Main

init();

googlePlacesAPIService = new google.maps.places.PlacesService( document.createElement('div') );

/*
if( allPlacesId.length === 0 ) {

    fetchAllPlaceRadar(1000);

} else if (restaurants.lenght) {

    getDetailsAfterRadar(allPlacesId, 1000);

}*/



//############################################################//
// Init function : set base user's coordinates, create the map, track user's position

function init(){

// Initialisation of user's location with coordinates of Lyon near Bellecour

	userCoordinates = {

		userLatitude : 45.75717800533178,

		userLongitude : 4.83480298193669

	};

// Mapbox generation with API key authentication

	map = mapInitialisation(userCoordinates);

	map.on('click', function ( element ) {

		var features = map.queryRenderedFeatures(element.point, {
			layers: ['barPlaceSymbol', 'restaurantPlaceSymbol', 'barRestaurantPlaceSymbol'] // replace this with the name of the layer
		});

		if (!features.length) {
			return;
		}

		var feature = features[0];

		var request = {

			placeId: feature.properties.id

		};

		googlePlacesAPIService.getDetails( request, function (result, status) {

			getDetailsCallback(result, status, features);

		} );

	});

	var goButton = document.getElementById("go");

	goButton.addEventListener("click", function () {

		var activeLayers = ['restaurantPlaceSymbol', "barPlaceSymbol", "barRestaurantPlaceSymbol"];

		for(var i in activeLayers)
		{

			//map.setFilter( activeLayers[i], ['==', 'rating', 4]);

			filterMap();

		}

	});

}

function mapInitialisation(userCoordinates) {

	mapboxgl.accessToken = 'pk.eyJ1IjoiYWd0ZXJyYWwiLCJhIjoiY2pkMjRnbjJkNWYwZDJ4bGdwMWlxODJiYSJ9.4W9g-Go5vHpL9UZmjnGj4g';

	map = new mapboxgl.Map({

		container: 'map',

		center: [ userCoordinates.userLongitude, userCoordinates.userLatitude ],

		zoom: 11,

		style: 'mapbox://styles/mapbox/streets-v9'

	});

	map.addControl(new mapboxgl.GeolocateControl({

		positionOptions: {

			enableHighAccuracy: true

		},

		trackUserLocation: true

	}));

	// disable map rotation using right click + drag
	map.dragRotate.disable();

	// disable map rotation using touch rotation gesture
	map.touchZoomRotate.disableRotation();

	map.on('load', function () {

		map.addSource("places", {
			type: "geojson",
			data: "JSON/places.geojson",
			cluster: true,
			clusterMaxZoom: 15, // Max zoom to cluster points on
			clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
		});

		map.addLayer({
			id: "clusters",
			type: "circle",
			source: "places",
			filter: ["has", "point_count"],
			paint: {
				"circle-color": [
					"step",
					["get", "point_count"],
					"#51bbd6",
					100,
					"#e9f154",
					750,
					"#f25525"
				],
				"circle-radius": [
					"step",
					["get", "point_count"],
					20,
					100,
					30,
					750,
					40
				]
			}
		});

		map.addLayer({
			id: "cluster-count",
			type: "symbol",
			source: "places",
			filter: ["has", "point_count"],
			layout: {
				"text-field": "{point_count_abbreviated}",
				"text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
				"text-size": 12
			}
		});

		map.loadImage('Assets/barIcon.png', function(error, image) {

			map.addImage('barIcon', image);

		});

        map.addLayer({
            id: "barPlaceSymbol",
            type: "symbol",
            source: "places",
            filter : ['==', 'type', "Bar"],
            layout: {
                "text-field": "{name}",
                "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
                "text-offset": [0, 0.6],
                "text-anchor": "top",
                "icon-image": "barIcon",
                "icon-size" : 0.3,
                "visibility" : 'visible',
                "icon-allow-overlap" : true,
                "text-allow-overlap" : true
            },
            paint: {
                "text-halo-color": "rgba(0,0,0,1)"
            }
        });

		map.loadImage('Assets/restaurantIcon.png', function(error, image) {

			map.addImage('restaurantIcon', image);

		});

        map.addLayer({
            id: "restaurantPlaceSymbol",
            type: "symbol",
            source: "places",
            filter : ['==','type', 'Restaurant'],
            layout: {
                "text-field": "{name}",
                "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
                "text-offset": [0, 0.6],
                "text-anchor": "top",
                "icon-image": "restaurantIcon",
                "icon-size" : 0.3,
                "visibility" : 'visible',
                "icon-allow-overlap" : true,
                "text-allow-overlap" : true
            },
            paint: {
                "text-halo-color": "rgba(0,0,0,1)"
            }
        });

		map.loadImage('Assets/cafeIcon.png', function(error, image) {

			map.addImage('barRestaurantIcon', image);

		});

        map.addLayer({
            id: "barRestaurantPlaceSymbol",
            type: "symbol",
            source: "places",
            filter : ['==', 'type', 'Bar-restaurant'],
            layout: {
                "text-field": "{name}",
                "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
                "text-offset": [0, 0.6],
                "text-anchor": "top",
                "icon-image": "barRestaurantIcon",
                "icon-size" : 0.3,
                "visibility" : 'visible',
                "icon-allow-overlap" : true,
                "text-allow-overlap" : true
            },
            paint: {
                "text-halo-color": "rgba(0,0,0,1)"
            }
        });

	});


// Update user's location

	getUserLocation();

// Creation of user marker on map

	userPositionMarker = new mapboxgl.Marker().setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude]);

	var markerHeight = 50, markerRadius = 10, linearOffset = 25;

	var popupOffsets = {
		'top': [0, 0],
		'top-left': [0,0],
		'top-right': [0,0],
		'bottom': [0, -markerHeight],
		'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
		'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
		'left': [markerRadius, (markerHeight - markerRadius) * -1],
		'right': [-markerRadius, (markerHeight - markerRadius) * -1]
	};

	var popup = new mapboxgl.Popup({offset:popupOffsets, closeButton: false})
		.setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude])
		.setHTML("<h3 id='youAreHere' >You are here</h3>")
		.addTo(map);

	userPositionMarker.setPopup( popup );

	userPositionMarker.addTo(map);

	var location = new mapboxgl.LngLat( userCoordinates.userLongitude, userCoordinates.userLatitude );

	var coords = {

		latitude : location.lat,

		longitude : location.lng

	};

	var pos = {

		coords : coords

	};

	setUserCoordinates( pos );

	googlePlacesAPIService = new google.maps.places.PlacesService( document.createElement('div') );




	createGeocoder();

	return map;

}

//############################################################//
// getUserLocation : retrieves the user's location and watch location changes

function getUserLocation()
{

	map.setCenter([userCoordinates.userLongitude, userCoordinates.userLatitude]);

	if( navigator.geolocation )
	{

		navigator.geolocation.watchPosition(setUserCoordinates);

	}

}

//############################################################//
// setUserCoordinates : fix the userCoordinates properties, center the map on the user's location and update the marker

function setUserCoordinates( position ) {

	userCoordinates.userLatitude = position.coords.latitude;

	userCoordinates.userLongitude = position.coords.longitude;

	map.setCenter([userCoordinates.userLongitude, userCoordinates.userLatitude]);

	userPositionMarker.setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude]);

	var location = new mapboxgl.LngLat( userCoordinates.userLongitude, userCoordinates.userLatitude );

	// getPlacesOffline( location, 4, 4, searchOptions );

}

//############################################################//
// Online functions

function getPlaces( location, price, opened, rating, radius, type )
{
	placesRequest = {

		location : location,

		minPriceLevel : 0,

		maxPriceLevel : null,

		openNow : null,

		radius : radius,

		type : null

	};

	if( price != null )
		placesRequest.maxPriceLevel = price;

	if( opened != null )
		placesRequest.openNow = opened;

	switch (type){

		case 1:

			placesRequest.type = 'bar';

			break;

		case 2:

			placesRequest.type = 'restaurant';

			break;

		default:
			break;

	}

	if(type == 0)
	{

		placesRequest.type = 'bar';

		googlePlacesAPIService.nearbySearch( placesRequest, callbackBars );

		placesRequest.type = 'restaurant';

		googlePlacesAPIService.nearbySearch( placesRequest, callbackRestaurants );

	}
	else
	{

		googlePlacesAPIService.nearbySearch( placesRequest, callbackPlaces );

	}

}

//############################################################//
// Callbacks

function callbackBars( results, status ) {

	if ( status == google.maps.places.PlacesServiceStatus.OK ) {

		bars = "[";

		for ( var i = 0 ; i < results.length ; i++ ) {

			var actualPlace = results[i];

			placeInformations = {

				"id" : actualPlace['place_id'],

				"coordinates" : actualPlace['geometry']['location'],

				"adress" : actualPlace['vicinity'],

				"rating" : actualPlace['rating'],

				"opened" : "unknown",

				"name" : actualPlace ['name'],

				"type" : 'bar',

			};

			if( actualPlace['opening_hours'] )
				placeInformations.opened = actualPlace['opening_hours']['open_now'];

			if(i === results.length - 1)

				bars += JSON.stringify(placeInformations) ;
			else
				bars += JSON.stringify(placeInformations) + ",";

		}

		bars += "]";

		displayBars( bars );

	}

}

function callbackRestaurants(results, status) {

	if ( status == google.maps.places.PlacesServiceStatus.OK ) {

		restaurants = "[";

		for ( var i = 0 ; i < results.length ; i++ ) {

			var actualPlace = results[i];

			placeInformations = {

				"id": actualPlace['place_id'],

				"coordinates": actualPlace['geometry']['location'],

				"adress": actualPlace['vicinity'],

				"rating": actualPlace['rating'],

				"opened": "unknown",

				"name": actualPlace ['name'],

				"type": 'restaurant',

			};

			if (actualPlace['opening_hours'])
				placeInformations.opened = actualPlace['opening_hours']['open_now'];

			if (i === results.length - 1)
				restaurants += JSON.stringify(placeInformations);
			else
				restaurants += JSON.stringify(placeInformations) + ",";

		}

		restaurants += "]";

		displayRestaurant( restaurants );

	}

}

function callbackPlaces( results, status )
{

	barsRestaurants = "[";

	bars = "[";

	restaurants = "[";

	if (status === google.maps.places.PlacesServiceStatus.OK) {

		for (var i = 0; i < results.length ; i++) {

			var actualPlace = results[i];

			placeInformations = {

				"id" : actualPlace['place_id'],

				"coordinates" : actualPlace['geometry']['location'],

				"adress" : actualPlace['vicinity'],

				"rating" : actualPlace['rating'],

				"opened" : null,

				"name" : actualPlace ['name'],

				"type" : null,

			};

			if( actualPlace['opening_hours'] )
				placeInformations.opened = actualPlace['opening_hours']['open_now'];

			var isBar = checkIfPlaceIsBar(actualPlace);

			var isRestaurant = checkIfPlaceIsRestaurant(actualPlace);

			if( isBar && isRestaurant)
			{

				placeInformations.type = "Bar-restaurant";

			}
			else if ( isBar )
			{

				placeInformations.type = "Bar";

			}
			else if ( isRestaurant )
			{

				placeInformations.type = "Restaurant";

			}

			if(i === results.length - 1) {

				if (isBar && isRestaurant)
					barsRestaurants += JSON.stringify(placeInformations);
				else if (isBar)
					bars += JSON.stringify(placeInformations);
				else
					restaurants += JSON.stringify(placeInformations);

			}
			else {

				if (isBar && isRestaurant)
					barsRestaurants += JSON.stringify(placeInformations) + ",";
				else if (isBar)
					bars += JSON.stringify(placeInformations) + ",";
				else
					restaurants += JSON.stringify(placeInformations) + ",";

			}

		}

	}

	barsRestaurants += "]";

	bars += "]";

	restaurants += "]";

	// displayPlaces( bars, restaurants );

}

//############################################################//
// Display related functions

function displayPlaces( bars, restaurants, barsRestaurants )
{
//REWORK TO DO WITH LAYER
	// displayBars( bars );

	//displayRestaurant( restaurants );

	//displayBarRestaurant( barsRestaurants );

}

function displayBarRestaurant( barsRestaurants ) {

	var barRestaurantsArray = JSON.parse( barsRestaurants );

	for( var i = 0 ; i < barRestaurantsArray.length ; i++ )
	{

		var actualRestaurant = barRestaurantsArray[i];

		var marker = new  mapboxgl.Marker().setLngLat(JSON.parse(JSON.stringify(actualRestaurant['coordinates'])));

		var markerHeight = 50, markerRadius = 10, linearOffset = 25;

		var popupOffsets = {
			'top': [0, 0],
			'top-left': [0,0],
			'top-right': [0,0],
			'bottom': [0, -markerHeight],
			'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'left': [markerRadius, (markerHeight - markerRadius) * -1],
			'right': [-markerRadius, (markerHeight - markerRadius) * -1]
		};

		var popup = new mapboxgl.Popup({offset:popupOffsets, closeButton: false})
			.setLngLat(actualRestaurant['coordinates'])
			.setHTML(createMarkerPopupHTML(actualRestaurant))
			.addTo(map);

		marker.setPopup( popup );

		locationsMarkers.push( marker );

		marker.addTo( map );


	}

}

function displayRestaurant(restaurants)
{

	var restaurantsArray = JSON.parse(restaurants);

	for( var i = 0 ; i < restaurantsArray.length ; i++ )
	{

		var actualRestaurant = restaurantsArray[i];

		var marker = new  mapboxgl.Marker().setLngLat(JSON.parse(JSON.stringify(actualRestaurant['coordinates'])));

		var markerHeight = 50, markerRadius = 10, linearOffset = 25;

		var popupOffsets = {
			'top': [0, 0],
			'top-left': [0,0],
			'top-right': [0,0],
			'bottom': [0, -markerHeight],
			'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'left': [markerRadius, (markerHeight - markerRadius) * -1],
			'right': [-markerRadius, (markerHeight - markerRadius) * -1]
		};

		var popup = new mapboxgl.Popup({offset:popupOffsets, closeButton: false})
			.setLngLat(actualRestaurant['coordinates'])
			.setHTML(createMarkerPopupHTML(actualRestaurant))
			.addTo(map);

		marker.setPopup( popup );

		locationsMarkers.push( marker );

		marker.addTo( map );

	}

}

function displayBars(bars)
{

	var barsArray = JSON.parse(bars);

	for( var i = 0 ; i < barsArray.length ; i++ )
	{

		var actualBar = barsArray[i];

		var marker = new  mapboxgl.Marker().setLngLat(JSON.parse(JSON.stringify(actualBar['coordinates'])));

		var markerHeight = 50, markerRadius = 10, linearOffset = 25;

		var popupOffsets = {
			'top': [0, 0],
			'top-left': [0,0],
			'top-right': [0,0],
			'bottom': [0, -markerHeight],
			'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'left': [markerRadius, (markerHeight - markerRadius) * -1],
			'right': [-markerRadius, (markerHeight - markerRadius) * -1]
		};

		var popup = new mapboxgl.Popup({offset:popupOffsets, closeButton: false})
			.setLngLat(actualBar['coordinates'])
			.setHTML(createMarkerPopupHTML(actualBar))
			.addTo(map);

		marker.setPopup( popup );

		locationsMarkers.push( marker );

		marker.addTo( map );

	}

}

function createMarkerPopupHTML(place)
{

	var state = "closed";

	if ( place.opened )
	{

		state = "opened";

	}

	var html = "";

	html += "<p id='popupTitle'>" + place.name + "</p>";
	html += "<br><a id='popupType'>" + place.type + "</a>";
	html += "<br><a id='popupAddress' target='_blank' href='https://www.google.com/maps/dir/?api=1&origin=" + userCoordinates.userLatitude + ',' + userCoordinates.userLongitude + "&destination=QVB&destination_place_id=" + place.id + "&travelmode=walking'>" + place.adress + "</a>";

	if( place.opened != null )
		html += "<br><p id='popupOpen'>Now: " + state + "</p>";

	if( place.rating != null ) {
		html += "<br><p id='popupRating'>Rating: ";

		var i;

		for(i = 1; i < place.rating ; i++) {

			/* add full stars */
			html += "<i class=\"fa fa-star\"></i>";

		}

		for(var j = i; j <= 5; j++) {

			/* add empty stars */
			html += "<i class=\"fa fa-star-o\"></i>";

		}

		html += "</p>";
	}

	if( place.website != null )
		html += "<br><a id='popupWebsite' target=\"_blank\" href=\"" + place.website + "\"> Website </a>";

	if( place.phone != null )
		html += "<br><p id='popupPhone'>Phone: <a href=\"tel:" + place.phone + "\"</a>"+ place.phone + "</p>";

	return html;

}

function clearMap()
{

	for(var i = 0; i < locationsMarkers.length; i++)
	{

		locationsMarkers[i].remove();

	}

	locationsMarkers = [];

}

//############################################################//
// Tests functions

function checkIfPlaceIsBar(place) {

	for(var i = 0; i < place.types.length; i++)
	{

		if ( place.types[i] === "bar" )
			return true;

	}

	return false;

}

function checkIfPlaceIsRestaurant(place) {

	for(var i = 0; i < place.types.length; i++)
	{

		if ( place.types[i] === "restaurant" )
			return true;

	}

	return false;

}

//############################################################//
// Offline functions

//############################################################//
// Function that crawls over Lyon to fetch sectors

function fetchAllPlaces( timeInterval ) {

	//if (barsRestaurants.length === 0 || restaurants.length === 0 || bars.length === 0) {

	barsRestaurants = "[";

	bars = "[";

	restaurants = "[";

	counter = 0;

	var baseCoordinates = {

		lat: 45.788347,

		lng: 4.791173

	};

	var coordinates = {

		lat: 45.788347,

		lng: 4.791173

	};

	var interval = setInterval(function () {

		var location = new mapboxgl.LngLat( coordinates.lng.toFixed(6), coordinates.lat.toFixed(6) );

		var request = {

			location: location,

			types: ["bar", "restaurant"], // Deprecated

			radius: 150

		};

		// test marker

		var marker = new  mapboxgl.Marker().setLngLat( location ).addTo(map);

		// console.log("fetch with lat: " + coordinates.lat.toFixed(6) + " and lng: "+ coordinates.lng.toFixed(6) );

		googlePlacesAPIService.nearbySearch( request, fetchCallBack );

		if (coordinates.lat <= mapGridBounds.bottomLatitude) {

			clearInterval(interval);

		}

		if (coordinates.lng > mapGridBounds.rightLongitude) {

			coordinates.lng = baseCoordinates.lng;

			coordinates.lat -= latVariance;

		} else {

			coordinates.lng += lngVariance;

		}

	}, timeInterval);

	setTimeout(function () {

		barsRestaurants = barsRestaurants.slice(0, barsRestaurants.length - 1) + "]";

		bars = bars.slice(0, bars.length - 1) + "]";

		restaurants = restaurants.slice(0, restaurants.length - 1) + "]";

		console.log("All data retrieved");

		var position = new mapboxgl.LngLat(userCoordinates.userLongitude, userCoordinates.userLatitude);

		getPlacesOffline(position, 4, 4, searchOptions);

	}, timeInterval * (numberOfItemsOnLatitude * numberOfItemsOnLongitude) + 1000);

	//  }

}

function fetchAllPlaceRadar(timeInterval) {

	allPlacesId = [];

	counter = 0;

	var lngStep = lngVariance * 7;

	var latStep = latVariance * 7;


	var baseBounds = {

		north: 45.788347,

		west: 4.791173,

		south: 45.788347 - latStep,

		east: 4.791173 + lngStep

	};

	var bounds = {

		north: 45.788347,

		west: 4.791173,

		south: 45.788347 - latStep,

		east: 4.791173 + lngStep

	};

	var i = 1;

	console.log("Crawling on lyon...");

	var interval = setInterval(function () {

		if (bounds.north < mapGridBounds.bottomLatitude - latVariance) {

			clearInterval(interval);

		}

		var sw = new google.maps.LatLng(bounds.south.toFixed(6), bounds.west.toFixed(6));

		var ne = new google.maps.LatLng(bounds.north.toFixed(6), bounds.east.toFixed(6));

		var radarBounds = new google.maps.LatLngBounds(sw, ne);

		placesRequest = {

			bounds : radarBounds,

			type : "bar"

		};

		googlePlacesAPIService.radarSearch( placesRequest, function (results, status) {

			radarSquareCallBack(results, status, allPlacesId, i);

		} );

		placesRequest = {

			bounds : radarBounds,

			type : "restaurant"

		};

		googlePlacesAPIService.radarSearch( placesRequest, function (results, status) {

			radarSquareCallBack(results, status, allPlacesId, i);

		} );

		// test markers
		/*
				console.log(bounds);

				var position = new mapboxgl.LngLat(bounds.west.toFixed(6), bounds.north.toFixed(6));

				new  mapboxgl.Marker().setLngLat( position ).addTo(map);

				position = new mapboxgl.LngLat(bounds.west.toFixed(6), bounds.south.toFixed(6));

				new  mapboxgl.Marker().setLngLat( position ).addTo(map);

				position = new mapboxgl.LngLat(bounds.east.toFixed(6), bounds.north.toFixed(6));

				new  mapboxgl.Marker().setLngLat( position ).addTo(map);

				position = new mapboxgl.LngLat(bounds.east.toFixed(6), bounds.south.toFixed(6));

				new  mapboxgl.Marker().setLngLat( position ).addTo(map);
		*/

		if (bounds.west > mapGridBounds.rightLongitude) {

			bounds.west = baseBounds.west;

			bounds.east = bounds.west + lngStep;

			bounds.north -= latStep;

			bounds.south -= latStep;

		} else {

			bounds.west += lngStep;

			bounds.east += lngStep;

		}

		i++;

	}, timeInterval);

	setTimeout(function () {

		console.log("All data retrieved");

		getDetailsAfterRadar(allPlacesId, 2000);

	}, timeInterval * 31 + 1000);

}

function radarSquareCallBack(results, status, array, i) {

	i--;

	console.log("Fetching zones : " + i + " / 31 ... Status : " + status);

	if( status == google.maps.places.PlacesServiceStatus.OK )
	{

		// console.log(results);

		for(var i = 0; i < results.length; i++) {

			array.push(results[i]["place_id"]);

		}

	}

	//console.log(array.toString());

}

function getDetailsAfterRadar(placeIds, timeInterval) {

    var i = 2931;

	var interval = setInterval(function () {

		if (i % 100 == 0){

			console.log("Bars : ");
			console.log(fetchedBars);
			console.log("Bar Restaurants : ");
			console.log(fetchedBarRestaurants);
			console.log("Restaurants : " );
			console.log(fetchedRestaurants);
			console.log("Total : " );
			console.log(fetchedBarRestaurants.length + fetchedBars.length + fetchedRestaurants.length);

		}

        if( i >= placeIds.length ) {


            clearInterval(interval);

            for(var j = 0; j < fetchedBars.length ; j ++) {

                barsString += JSON.stringify(fetchedBars[j]);

                if( j !== fetchedBars.length - 1) {

                    barsString += ",";

                }

            }

            for(j = 0; j < fetchedRestaurants.length ; j ++) {

                restaurantsString += JSON.stringify(fetchedRestaurants[j]);

                if( j !== fetchedRestaurants.length - 1) {

                    restaurantsString += ",";

                }

            }

            for(j = 0; j < fetchedBarRestaurants.length ; j ++) {

                barsRestaurantsString += JSON.stringify(fetchedBarRestaurants[j]);

                if( j !== fetchedBarRestaurants.length - 1) {

                    barsRestaurantsString += ",";

                }

            }

            return;

        }

        var detailsRequest = {

			placeId : placeIds[i]

		};

		googlePlacesAPIService.getDetails( detailsRequest, function (results, status) {

            if(status == "OVER_QUERY_LIMIT") {

                console.log("State " + i + ", interruption");

                clearInterval(interval);

                for(var j = 0; j < fetchedBars.length ; j ++) {

                    barsString += JSON.stringify(fetchedBars[j]);

                    if( j !== fetchedBars.length - 1) {

                        barsString += ",";

                    }

                }

                for(j = 0; j < fetchedRestaurants.length ; j ++) {

                    restaurantsString += JSON.stringify(fetchedRestaurants[j]);

                    if( j !== fetchedRestaurants.length - 1) {

                        restaurantsString += ",";

                    }

                }

                for(j = 0; j < fetchedBarRestaurants.length ; j ++) {

                    barsRestaurantsString += JSON.stringify(fetchedBarRestaurants[j]);

                    if( j !== fetchedBarRestaurants.length - 1) {

                        barsRestaurantsString += ",";

                    }

                }

            } else {

                getDetailsCallback(results, status, fetchedBars, fetchedRestaurants, fetchedBarRestaurants, i, placeIds.length);

            }

        });

		i++;

	}, timeInterval);

	setTimeout(function () {

		console.log("All details retrieved");

	}, timeInterval * placeIds.length + 1000);

}

//############################################################//
// getPlacesOffline

function getPlacesOffline( location, price, rating, type ) {

	console.log("Displaying places...");

	var barJSON = JSON.parse( bars );

	var restaurantsJSON = JSON.parse( restaurants );

	var barsRestaurantsJSON = JSON.parse( barsRestaurants );

	switch ( type ) {

		case 0:

			//
			barJSON = barJSON.filter( function (value) {

				return filterFunction( value, location, price, rating );

			});

			if (barJSON.length != 0)
			//displayBars( JSON.stringify( barJSON ) );

			//
				restaurantsJSON = restaurantsJSON.filter( function (value) {

					return filterFunction( value, location, price, rating );

				});

			if (restaurantsJSON.length != 0)
			//displayRestaurant( JSON.stringify(restaurantsJSON) );

			//
				barsRestaurantsJSON = barsRestaurantsJSON.filter( function (value) {

					return filterFunction( value, location, price, rating );

				});

			if (barsRestaurantsJSON.length != 0)
			// displayBarRestaurant( JSON.stringify( barsRestaurantsJSON ) );

			// console.log( "Bars : " + barJSON.length + " restaurants : " + restaurantsJSON.length + " bar-restaurant : " + barsRestaurantsJSON.length );

				break;

		case 1:

			barJSON.filter( function (value) {

				return filterFunction( value, location, price, rating );

			});

			// displayPlaces( JSON.stringify( barJSON ) );

			break;

		case 2:

			restaurantsJSON.filter( function (value) {

				return filterFunction( value, location, price, rating );

			});

			// displayPlaces( JSON.stringify( restaurantsJSON ) );

			break;

		default:

			break;

	}

}

//############################################################//
// Filter functions

function filterFunction( value, location, price, rating ) {

	var trueLatitude = Math.abs( location.lat - value.coordinates.lat ) <= latVariance/2;

	var trueLongitude = Math.abs( location.lng - value.coordinates.lng ) <= lngVariance/2;

	return trueLatitude && trueLongitude;

}

//############################################################//
// Offline callbacks

function fetchCallBack( results, status )
{

	if( status == google.maps.places.PlacesServiceStatus.OK )
	{

		//   console.log(results[0]['opening_hours']['weekday_text']);

		counter += results.length;

		// console.log(results.length);

		// console.log(results);

		for (var i = 0; i < results.length ; i++) {

			var actualPlace = results[i];

			placeInformations = {

				"id" : actualPlace['place_id'],

				"coordinates" : actualPlace['geometry']['location'],

				"adress" : actualPlace['vicinity'],

				"rating" : actualPlace['rating'],

				"opened" : null,

				"name" : actualPlace ['name'],

				"type" : null,

				"types" : actualPlace['types'],

				"icon" : actualPlace['icon'],

				"opening_hours" : actualPlace['opening_hours']

			};

			if( actualPlace['opening_hours'] )
				placeInformations.opened = actualPlace['opening_hours']['open_now'];

			var isBar = checkIfPlaceIsBar(actualPlace);

			var isRestaurant = checkIfPlaceIsRestaurant(actualPlace);

			if( isBar && isRestaurant)
			{

				placeInformations.type = "Bar-restaurant";

			}
			else if ( isBar )
			{

				placeInformations.type = "Bar";

			}
			else if ( isRestaurant )
			{

				placeInformations.type = "Restaurant";

			}

			if (isBar && isRestaurant)
				barsRestaurants += JSON.stringify(placeInformations) + ",";
			else if (isBar)
				bars += JSON.stringify(placeInformations) + ",";
			else
				restaurants += JSON.stringify(placeInformations) + ",";

		}

	}

}

//############################################################//


// updateJSONDataFile : update the JSON data file with nearby places

function getAllPlaceIDs() {

	requestItemsNumber = 0;

	counter = 0;

	var location = new google.maps.LatLng( userCoordinates.userLatitude, userCoordinates.userLongitude );

	placesRequest = {

		location : location,

		radius : 3000,

		type : "bar"

	};

	googlePlacesAPIService.radarSearch(placesRequest, callbackPlacesID);

	placesRequest = {

		location : location,

		radius : 3000,

		type : "restaurant"

	};

	googlePlacesAPIService.radarSearch(placesRequest, callbackPlacesID);

}

function callbackPlacesID( results, status, callback) {

	if (status === google.maps.places.PlacesServiceStatus.OK) {

		requestItemsNumber += results.length;

		console.log(results.length);

		barsRestaurants = "[";

		bars = "[";

		restaurants = "[";

		for (var i = 0; i < results.length; i++)
		{

			var coordinates = JSON.stringify(results[i]['geometry']['location']);

			createSimpleMarker( coordinates );

			var detailsRequest = {

				placeId : results[i]["place_id"]

			};

			requestingInterval = setInterval(googlePlacesAPIService.getDetails( detailsRequest, getDetailsCallback ), 1000);

		}

	}

}

var requestingInterval;

function closeJSONCallback(value)
{

	counter += value;

//    console.log(counter);

	if( counter == requestItemsNumber )
	{

		window.clearInterval(requestingInterval);

		barsRestaurants += "]";

		bars += "]";

		restaurants += "]";

	}

}

function createSimpleMarker( placeCoordinates )
{

	var marker = new  mapboxgl.Marker().setLngLat(JSON.parse( placeCoordinates ));

	var markerHeight = 50, markerRadius = 10, linearOffset = 25;

	var popupOffsets = {
		'top': [0, 0],
		'top-left': [0,0],
		'top-right': [0,0],
		'bottom': [0, -markerHeight],
		'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
		'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
		'left': [markerRadius, (markerHeight - markerRadius) * -1],
		'right': [-markerRadius, (markerHeight - markerRadius) * -1]
	};


	//marker.setPopup( popup );

	locationsMarkers.push( marker );

	marker.addTo( map );

}

function generateGeoJSON(){

	var parsedBars = JSON.parse(bars);

	var parsedRestaurants = JSON.parse(restaurants);

	var parsedBarRestaurants = JSON.parse(barsRestaurants);

	var geoJSONString = "{\"type\" : \"FeatureCollection\", \"features\":[";

	var geoJSONItem = {

		"type": "Feature",

		"geometry": {

			"type": "Point",

			"coordinates": [null, null]

		},

		"properties": {

            "adress" : null,

            "icon" : null,

            "id" : null,

			"name": null,

            "opened" : null,

            "rating" : null,

            "type" : null,

            "types" : null,

            "weekday_text" : null,

            "phone" : null

        }

	};

	for( var i = 0 ; i < parsedBars.length ; i++ ) {

		geoJSONItem.geometry.coordinates = [parsedBars[i]["coordinates"]["lng"], parsedBars[i]["coordinates"]["lat"]];

		geoJSONItem.geometry.name = parsedBars[i]["name"];

		geoJSONItem.properties.id = parsedBars[i].id;

		geoJSONItem.properties.name = parsedBars[i].name;

		geoJSONItem.properties.type = parsedBars[i].type;

		geoJSONItem.properties.types = parsedBars[i].types;

		geoJSONItem.properties.adress = parsedBars[i].adress;

		geoJSONItem.properties.rating = parsedBars[i].rating;

		geoJSONItem.properties.icon = "Assets/barIcon.png";

        if(parsedBars[i].phone != null) {

            geoJSONItem.properties.phone = parsedBars[i].phone;

        }

        if(parsedBars[i]["weekday_text"] != null) {

            geoJSONItem.properties.weekday_text = parsedBars[i].weekday_text;

        }

        geoJSONString += JSON.stringify( geoJSONItem );

		if( i < parsedBars.length - 1 )

			geoJSONString +=  ',';

	}

	geoJSONString += ',';

	for( var i = 0 ; i < parsedBarRestaurants.length ; i++ ) {

		geoJSONItem.geometry.coordinates = [parsedBarRestaurants[i]["coordinates"]["lng"], parsedBarRestaurants[i]["coordinates"]["lat"]];

		geoJSONItem.geometry.name = parsedBarRestaurants[i]["name"];

		geoJSONItem.properties.id = parsedBarRestaurants[i].id;

		geoJSONItem.properties.name = parsedBarRestaurants[i].name;

		geoJSONItem.properties.type = parsedBarRestaurants[i].type;

		geoJSONItem.properties.types = parsedBarRestaurants[i].types;

		geoJSONItem.properties.adress = parsedBarRestaurants[i].adress;

		geoJSONItem.properties.rating = parsedBarRestaurants[i].rating;

		geoJSONItem.properties.icon = "Assets/restaurantIcon.png";

		geoJSONString += JSON.stringify( geoJSONItem );

        if(parsedBarRestaurants[i].phone != null) {

            geoJSONItem.properties.phone = parsedBarRestaurants[i].phone;

        }

        if(parsedBarRestaurants[i]["weekday_text"] != null) {

            geoJSONItem.properties.weekday_text = parsedBarRestaurants[i].weekday_text;

        }

        if( i < parsedBarRestaurants.length - 1 )

			geoJSONString +=  ',';

	}

	geoJSONString += ',';

	for( var i = 0 ; i < parsedRestaurants.length ; i++ ) {

		geoJSONItem.geometry.coordinates = [parsedRestaurants[i]["coordinates"]["lng"], parsedRestaurants[i]["coordinates"]["lat"]];

		geoJSONItem.geometry.name = parsedRestaurants[i]["name"];

		geoJSONItem.properties.id = parsedRestaurants[i].id;

		geoJSONItem.properties.name = parsedRestaurants[i].name;

		geoJSONItem.properties.type = parsedRestaurants[i].type;

		geoJSONItem.properties.types = parsedRestaurants[i].types;

		geoJSONItem.properties.adress = parsedRestaurants[i].adress;

		geoJSONItem.properties.rating = parsedRestaurants[i].rating;

		geoJSONItem.properties.icon = "Assets/restaurantIcon.png";

		geoJSONString += JSON.stringify( geoJSONItem );

        if(parsedRestaurants[i].phone != null) {

            geoJSONItem.properties.phone = parsedRestaurants[i].phone;

        }

        if(parsedRestaurants[i]["weekday_text"] != null) {

            geoJSONItem.properties.weekday_text = parsedRestaurants[i].weekday_text;

        }

        if( i < parsedRestaurants.length - 1 )

			geoJSONString +=  ',';

	}

	geoJSONString += ']}';

    //DEBUG DISPLAY
    console.log(geoJSONString);

}

// Location button by mapbox
/*
map.addControl( new mapboxgl.GeolocateControl ({

	positionOptions: {

		enableHighAccuracy: true

	},

	trackUserLocation: true

}));*/

// JSONS



function createGeocoder() {

	map.addControl(new MapboxGeocoder({

		accessToken: mapboxgl.accessToken,

		country: 'fr', /* limit results to France */

		/* bounding box: area defined by two longitudes and two latitudes. */
		/* standard format: */
		/* bbox = left,bottom,right,top */
		/* bbox = min Longitude , min Latitude , max Longitude , max Latitude */
		bbox: [mapGridBounds.leftLongitute, mapGridBounds.bottomLatitude, mapGridBounds.rightLongitude, mapGridBounds.topLatitude],

	}));

}



function showMap(err, data) {
	// The geocoder can return an area, like a city, or a
	// point, like an address. Here we handle both cases,
	// by fitting the map bounds to an area or zooming to a point.
	if (data.lbounds) {
		map.fitBounds(data.lbounds);
	} else if (data.latlng) {
		map.setView([data.latlng[0], data.latlng[1]], 13);
	}
}
//############################################################//
// getPlacesOffline

function getPlacesOffline( location, price, rating, type ) {

	console.log("Displaying places...");

	var barJSON = JSON.parse( bars );

	var restaurantsJSON = JSON.parse( restaurants );

	var barsRestaurantsJSON = JSON.parse( barsRestaurants );

	switch ( type ) {

		case 0:

			barJSON = barJSON.filter( function (value) {

				return filterFunction( value, location, price, rating );

			});

			if (barJSON.length != 0)
			//displayBars( JSON.stringify( barJSON ) );

			//
				restaurantsJSON = restaurantsJSON.filter( function (value) {

					return filterFunction( value, location, price, rating );

				});

			if (restaurantsJSON.length != 0)
			//displayRestaurant( JSON.stringify(restaurantsJSON) );

			//
				barsRestaurantsJSON = barsRestaurantsJSON.filter( function (value) {

					return filterFunction( value, location, price, rating );

				});

			if (barsRestaurantsJSON.length != 0)
			// displayBarRestaurant( JSON.stringify( barsRestaurantsJSON ) );

				break;

		case 1:

			barJSON.filter( function (value) {

				return filterFunction( value, location, price, rating );

			});

			// displayPlaces( JSON.stringify( barJSON ) );

			break;

		case 2:

			restaurantsJSON.filter( function (value) {

				return filterFunction( value, location, price, rating );

			});

			// displayPlaces( JSON.stringify( restaurantsJSON ) );

			break;

		default:

			break;

	}

}

//############################################################//
// Filter functions

function filterFunction( value, location, price, rating ) {

	var trueLatitude = Math.abs( location.lat - value.coordinates.lat ) <= latVariance/2;

	var trueLongitude = Math.abs( location.lng - value.coordinates.lng ) <= lngVariance/2;

	return trueLatitude && trueLongitude;

}

function filterMap()
{

	var restaurantButton = document.getElementById("restaurantButton");

	var barButton = document.getElementById("barButton");

	var barRestaurantButton = document.getElementById("barRestaurantButton");


	var typeButtons = [restaurantButton, barButton, barRestaurantButton];


	var priceButton1 = document.getElementById("priceButton1");

	var priceButton2 = document.getElementById("priceButton2");

	var priceButton3 = document.getElementById("priceButton3");

	var priceButton4 = document.getElementById("priceButton4");


	var priceButtons = [priceButton1, priceButton2, priceButton3, priceButton4];


	var starButton1 = document.getElementById("starButton1");

	var starButton2 = document.getElementById("starButton2");

	var starButton3 = document.getElementById("starButton3");

	var starButton4 = document.getElementById("starButton4");

	var starButton5 = document.getElementById("starButton5");


	var starButtons = [starButton1, starButton2, starButton3, starButton4, starButton5];


	var aroundMeButton = document.getElementById("aroundMe");

	var openedNowButton = document.getElementById("openedNow");


	var filter = {

		types: [false, false, false],

		price : 0,

		rating : 0,

		aroundMe : aroundMeButton.checked,

		opened : openedNowButton.checked

	};

	for (var i = 0 ; i < typeButtons.length ; i ++) {

		filter.types[i] =  $(typeButtons[i]).data().clicked;

	}

	for (var i = 0 ; i < priceButtons.length && $(priceButtons[i]).data().clicked ; i ++) {

		filter.price++;

	}

	for (var i = 0 ; i < starButtons.length && $(starButtons[i]).data().clicked ; i ++) {

		filter.rating++;

	}

	var activeLayers = [];

	if(filter.types[0] == false)
		map.setLayoutProperty('restaurantPlaceSymbol', 'visibility', 'none');
	else
		activeLayers.push('restaurantPlaceSymbol');

	if(filter.types[0] == false)
		map.setLayoutProperty('barPlaceSymbol', 'visibility', 'none');
	else
		activeLayers.push('barPlaceSymbol');

	if(filter.types[0] == false)
		map.setLayoutProperty('barRestaurantPlaceSymbol', 'visibility', 'none');
	else
		activeLayers.push('barRestaurantPlaceSymbol');

	for(var i in activeLayers)
	{

		map.setFilter( activeLayers[i], ['==', 'rating', filter.rating]);

	}

}

//############################################################//
// Offline callbacks

function fetchCallBack( results, status )
{

	if( status == google.maps.places.PlacesServiceStatus.OK )
	{

		//  console.log(results[0]['opening_hours']['weekday_text']);

		counter += results.length;

		//  console.log(results.length);

		// console.log(results);

		for (var i = 0; i < results.length ; i++) {

			var actualPlace = results[i];

			placeInformations = {

				"id" : actualPlace['place_id'],

				"coordinates" : actualPlace['geometry']['location'],

				"adress" : actualPlace['vicinity'],

				"rating" : actualPlace['rating'],

				"opened" : null,

				"name" : actualPlace ['name'],

				"type" : null,

				"types" : actualPlace['types'],

				"icon" : actualPlace['icon'],

				"opening_hours" : actualPlace['opening_hours']

			};

			if( actualPlace['opening_hours'] )
				placeInformations.opened = actualPlace['opening_hours']['open_now'];

			var isBar = checkIfPlaceIsBar(actualPlace);

			var isRestaurant = checkIfPlaceIsRestaurant(actualPlace);

			if( isBar && isRestaurant)
			{

				placeInformations.type = "Bar-restaurant";

			}
			else if ( isBar )
			{

				placeInformations.type = "Bar";

			}
			else if ( isRestaurant )
			{

				placeInformations.type = "Restaurant";

			}

			if (isBar && isRestaurant)
				barsRestaurants += JSON.stringify(placeInformations) + ",";
			else if (isBar)
				bars += JSON.stringify(placeInformations) + ",";
			else
				restaurants += JSON.stringify(placeInformations) + ",";

		}

	}

}

//############################################################//


// updateJSONDataFile : update the JSON data file with nearby places

var requestingInterval;

function closeJSONCallback(value)
{

	counter += value;

//    console.log(counter);

	if( counter == requestItemsNumber )
	{

		window.clearInterval(requestingInterval);

		barsRestaurants += "]";

		bars += "]";

		restaurants += "]";

	}

}

function getDetailsCallback( result, status, bars, restaurants, barRestaurants, state , progression) {

	state --;

	console.log("Progression : " + state + " / " + progression + " ... Status : " + status);

	if (status === google.maps.places.PlacesServiceStatus.OK) {

		// console.log("callback");

		var actualPlace = result;

		placeInformations = {

			"id" : actualPlace['place_id'],

			"coordinates" : actualPlace['geometry']['location'],

			"adress" : actualPlace['vicinity'],

			"rating" : actualPlace['rating'],

			"opened" : null,

			"name" : actualPlace ['name'],

			"type" : null,

			"types" : actualPlace['types'],

			"icon" : actualPlace['icon'],

			"weekday_text" : null,

			"website" : actualPlace['website'],

			"phone" : actualPlace['formatted_phone_number']

		};

		if( actualPlace['opening_hours'] ) {

			placeInformations.opened = actualPlace['opening_hours']['open_now'];

			placeInformations.weekday_text = actualPlace['opening_hours']['weekday_text'];

		}

		var isBar = checkIfPlaceIsBar(actualPlace);

		var isRestaurant = checkIfPlaceIsRestaurant(actualPlace);

		if( isBar && isRestaurant)
		{

			placeInformations.type = "Bar-restaurant";

			barRestaurants.push(placeInformations);

		}
		else if ( isBar )
		{

			placeInformations.type = "Bar";

			bars.push(placeInformations);

		}
		else if ( isRestaurant )
		{

			placeInformations.type = "Restaurant";

			restaurants.push(placeInformations);

		}

		// features[0].properties = placeInformations;

		//map.getSource('places').setData(features[0]);

		/* var popup = new mapboxgl.Popup({ offset: [0, -15] })
			 .setLngLat(features[0].geometry.coordinates)
			 .setHTML( createMarkerPopupHTML(placeInformations))
			 .setLngLat(features[0].geometry.coordinates)
			 .addTo(map);
 */
	}

}

function createSimpleMarker( placeCoordinates )
{

	var marker = new  mapboxgl.Marker().setLngLat(JSON.parse( placeCoordinates ));

	var markerHeight = 50, markerRadius = 10, linearOffset = 25;

	var popupOffsets = {
		'top': [0, 0],
		'top-left': [0,0],
		'top-right': [0,0],
		'bottom': [0, -markerHeight],
		'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
		'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
		'left': [markerRadius, (markerHeight - markerRadius) * -1],
		'right': [-markerRadius, (markerHeight - markerRadius) * -1]
	};


	//marker.setPopup( popup );

	locationsMarkers.push( marker );

	marker.addTo( map );

}

