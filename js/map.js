
//######################################################################################################################
//########################## MAIN PROGRAM ##############################################################################
//######################################################################################################################
{

    // Creation of a loader icon

    var loaderBackground = document.createElement("div");

    loaderBackground.classList.add("loaderBackground");

    var loaderDiv = document.createElement("div");

    loaderDiv.classList.add("loader");

    loaderBackground.appendChild(loaderDiv);

    document.body.insertBefore(loaderBackground, document.body.firstChild);

    // Request to load the GeoJson source file and set geojsonSource property, removes loader and launch init()

    var xobj = new XMLHttpRequest();

    xobj.open('GET', 'JSON/fusionPlacesV2.geojson', true);

    xobj.onreadystatechange = function () {

        if (xobj.readyState === 4 && xobj.status == "200") {

            document.body.removeChild(loaderBackground);

            geojsonSource = xobj.responseText;

            init();

           // loadAllJSON();

        }

    };

    xobj.send(null);

}

//######################################################################################################################
//######################## GLOBAL VARIABLES ############################################################################
//######################################################################################################################

// Accent map used by accen_fold
var accentMap = {
    'á':'a', 'é':'e', 'í':'i','ó':'o','ú':'u', 'ä' : 'a', 'à' : 'a', 'è' : 'e', 'ï' : 'i', 'ô' : 'o', 'ö' : 'o', '\'' : ' ', '-' : ' '
};

// Function that removes accents in sentences.
function accent_fold (s) {

    if (!s) { return ''; }
    var ret = '';
    for (var i = 0; i < s.length; i++) {
        ret += accentMap[s.charAt(i)] || s.charAt(i);
    }
    return ret;

};

var googlePlacesAPIService; // Service for API request executions

var userCoordinates;        // User's coordinates

var map;                    // The map generated by mapbox

var latVariance = 0.001764; // Latitude difference to get to an other sector // Base = 0.000882

var lngVariance = 0.002560; // Longitude difference to get to an other sector // Base = 0.001280

var geojsonSource;          // GeoJson source of the project, initialised at the start

var forcedDate = null;      //

var mapGridBounds = {

    topLatitude : 45.788347,

    bottomLatitude : 45.732777,

    leftLongitute : 4.791173,

    rightLongitude : 4.871854

};  // Bounds of the map for research functions

var popups = [];            // Array of all active popups

//######################################################################################################################
//########## GENERAL INITIALISATION AND MAP INITIALISATION #############################################################
//######################################################################################################################

var userPositionMarker;     // Marker associated with user's location

//----------------------------------------------------------------------------------------------------------------------
// init() :
//
//  Initialize the map and all the event listeners on interactive elements
//----------------------------------------------------------------------------------------------------------------------

function init() {

    // Initialisation of user's location with coordinates of Lyon near Bellecour

    userCoordinates = {

        userLatitude: 45.75717800533178,

        userLongitude: 4.83480298193669

    };

    // Mapbox generation with API key authentication

    map = mapInitialisation(userCoordinates);


    // Buttons interactions

    var goButton = document.getElementById("go");

    goButton.addEventListener("click", filterMap);


    var resetButton = document.getElementById("resetFilters");

    resetButton.addEventListener("click", resetFilter);


    var searchTextfield = document.getElementById("textSearch");

    searchTextfield.addEventListener("input", function () {

        if( searchTextfield.value.length == 0 ) {

            resetFilter();

        }

    });


    var searchTextButton = document.getElementById("searchButton");

    searchTextButton.addEventListener("click", function () {

        filterSearch(searchTextfield.value);

    });


    window.addEventListener("keypress", function ( key ) {

        if( key.keyCode == 13 ) {

            filterSearch(searchTextfield.value);

        }

    });


    var navFilterButton = document.getElementById("navFilterButton");

    navFilterButton.addEventListener("click", function () {

        for( var i = 0; i < popups.length ; i++ ) {

            popups[i].remove();

        }

        popups.splice(0, popups.length);

    });

    //adding interactions on parameters

    var containerButtons = document.getElementById("containerViews");

    var buttons = containerButtons.getElementsByTagName("button");

    for (var i = 0 ; i < buttons.length ; i++) {

        //adding event listener on click

        buttons[i].addEventListener("click", function() {

            setStyleMap(this.textContent.toLowerCase()); //changing the style by passing the name of the layer

            this.classList.add("btn-dark"); //the selected button becomes dark

        });

    }

}

//----------------------------------------------------------------------------------------------------------------------
// mapInitialisation( userCoordinates ) :
//
//  Initialize a map with passed coordinates and set the map interactions
//
// INPUT :
//
//  userCoordinates -> actual coordinates of user
//
// OUTPUT :
//
//  map -> a mapbox's map object
//----------------------------------------------------------------------------------------------------------------------

function mapInitialisation(userCoordinates) {

    mapboxgl.accessToken = 'pk.eyJ1IjoiYWd0ZXJyYWwiLCJhIjoiY2pkMjRnbjJkNWYwZDJ4bGdwMWlxODJiYSJ9.4W9g-Go5vHpL9UZmjnGj4g';

    map = new mapboxgl.Map({

        container: 'map',

        center: [userCoordinates.userLongitude, userCoordinates.userLatitude],

        zoom: 15,

        style: 'mapbox://styles/mapbox/basic-v9'

    });

    map.addControl(new mapboxgl.GeolocateControl({

        positionOptions: {

            enableHighAccuracy: true

        },

        trackUserLocation: true

    }), 'bottom-right');

    // disable map rotation using right click + drag

    map.dragRotate.disable();

    // disable map rotation using touch rotation gesture

    map.touchZoomRotate.disableRotation();

    map.on('load', function () {

        map.addSource("places", {
            type: "geojson",
            data: "JSON/fusionPlaces.geojson",
            cluster: true,
            clusterMaxZoom: 16, // Max zoom to cluster points on
            clusterRadius: 75 // Radius of each cluster when clustering points (defaults to 50)
        });

        map.loadImage('Assets/homeIcon.png', function (error, image) {

            map.addImage('homeIcon', image);

        });

        map.addLayer({
            id: "placesSymbols",
            type: "symbol",
            source: "places",
            layout: {
                "text-field": "{name}",
                "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
                "text-offset": [0, 0.6],
                "text-anchor": "top",
                "icon-image": "homeIcon",
                "icon-size": 0.05,
                "visibility": 'visible',
                "icon-allow-overlap": true,
                "text-allow-overlap": true

            },
            paint: {
                "text-halo-color": "rgba(0,0,0,1)"
            }
        });

       /* map.addLayer({
            id: "placesSymbols",
            type: "circle",
            source: "places",
            paint: {
                "circle-color":
                    "#51bbd6"
                ,
                "circle-radius":
                    5
            }
        });
*/
        map.addLayer({
            id: "clusters",
            type: "circle",
            source: "places",
            filter: ["has", "point_count"],
            paint: {
                "circle-color": [
                    "step",
                    ["get", "point_count"],
                    "#51bbd6",
                    100,
                    "#e9f154",
                    750,
                    "#f25525"
                ],
                "circle-radius": [
                    "step",
                    ["get", "point_count"],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: "cluster-count",
            type: "symbol",
            source: "places",
            filter: ["has", "point_count"],
            layout: {
                "text-field": "{point_count_abbreviated}",
                "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
                "text-size": 12
            }
        });

    });

    map.on('click', function (element) {

        var features = map.queryRenderedFeatures(element.point, {

            layers: ['placesSymbols']

        });

        if (!features.length) {

            return;

        }

        var feature = features[0];

        if( feature.properties['place_id'] != null ) {

            popups.push(createPopupForSymbol(feature));

        }

    });

    var popup = new mapboxgl.Popup();

    map.on('mouseenter', 'placesSymbols', function (element) {

        var features = map.queryRenderedFeatures(element.point, {

            layers: ['placesSymbols']

        });

        if (!features.length) {

            return;

        }

        var feature = features[0];

        // For some strange reason, a cluster is considered as a placesSymbol's feature, this test assure not.

        //console.log(feature.properties);

        if( feature.properties['place_id'] != null ) {

            popup = createPopupForSymbol(feature);

        }

    });

    map.on('mouseleave', 'placesSymbols', function() {

        popup.remove();

    });


    // Update user's location

    getUserLocation();

    // Creation of user marker on map

    userPositionMarker = new mapboxgl.Marker().setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude]);

    var markerHeight = 50, markerRadius = 10, linearOffset = 25;

    var popupOffsets = {
        'top': [0, 0],
        'top-left': [0, 0],
        'top-right': [0, 0],
        'bottom': [0, -markerHeight],
        'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
        'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
        'left': [markerRadius, (markerHeight - markerRadius) * -1],
        'right': [-markerRadius, (markerHeight - markerRadius) * -1]
    };

    var popup = new mapboxgl.Popup({offset: popupOffsets, closeButton: false})
        .setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude])
        .setHTML("<h3 id='youAreHere' >You are here</h3>")
        .addTo(map);

    userPositionMarker.setPopup(popup);

    userPositionMarker.addTo(map);

    var location = new mapboxgl.LngLat(userCoordinates.userLongitude, userCoordinates.userLatitude);

    var coords = {

        latitude: location.lat,

        longitude: location.lng

    };

    var pos = {

        coords: coords

    };

    setUserCoordinates(pos);

    googlePlacesAPIService = new google.maps.places.PlacesService(document.createElement('div'));

    return map;

}

//----------------------------------------------------------------------------------------------------------------------
// getUserLocation() :
//
//  Launch a navigator's user's position watch
//----------------------------------------------------------------------------------------------------------------------

function getUserLocation() {

    map.setCenter([userCoordinates.userLongitude, userCoordinates.userLatitude]);

    if (navigator.geolocation) {

        navigator.geolocation.watchPosition(setUserCoordinates);

    }

}

//----------------------------------------------------------------------------------------------------------------------
// setUserCoordinates( position ) :
//
//  Update the userCoordinates property, and update the user's position's marker
//
// INPUT :
//
//  position -> a position with latitude and longitude
//----------------------------------------------------------------------------------------------------------------------

function setUserCoordinates( position ) {

    userCoordinates.userLatitude = position.coords.latitude;

    userCoordinates.userLongitude = position.coords.longitude;

    userPositionMarker.setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude]);

}

//######################################################################################################################
//##################### DISPLAY RELATED METHODS ########################################################################
//######################################################################################################################
//----------------------------------------------------------------------------------------------------------------------
// createPopupForSymbol( feature ) :
//
//  creates a popup for a place
//
// INPUT :
//
//  feature -> a geojson point object
//
// OUTPUT :
//
//  popup -> a mapbox popup
//----------------------------------------------------------------------------------------------------------------------

function createPopupForSymbol( feature ) {

    var placeInformations = feature.properties;

    var markerHeight = 50, markerRadius = 10, linearOffset = 25;

    var popupOffsets = {
        'top': [0, 0],
        'top-left': [0, 0],
        'top-right': [0, 0],
        'bottom': [0, -markerHeight],
        'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
        'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
        'left': [markerRadius, (markerHeight - markerRadius) * -1],
        'right': [-markerRadius, (markerHeight - markerRadius) * -1]
    };

    var popup = new mapboxgl.Popup({offset: popupOffsets})
        .setLngLat(feature.geometry.coordinates)
        .setHTML(createMarkerPopupHTML(placeInformations))
        .addTo(map);

    if( placeInformations.subtypes != null && placeInformations.subtypes != "null"){

        if( placeInformations.length != 0) {

            var subtypesLength = JSON.parse(placeInformations.subtypes).length;

            for (var j = 0; j < subtypesLength; j++) {

                var button = document.getElementById("subtypes" + j);

                button.addEventListener("click", function () {

                    console.log("search " + button.innerText);

                    filterSearch(button.innerText.toLowerCase());

                });

            }

        }

    }

    return popup;

}

//----------------------------------------------------------------------------------------------------------------------
// createMarkerPopupHTML( place ) :
//
//  Creates the html content of the popup
//
// INPUT :
//
//  place -> a place's properties dictionary
//
// OUTPUT :
//
//  html -> a html text for the popup
//----------------------------------------------------------------------------------------------------------------------

function createMarkerPopupHTML(place) {

    var html = "";

    var placeName = accent_fold(place.name);

    html += "<p id='popupTitle'>" + placeName + "</p>";

    html += "<p id='popupType'>" + place.mainType + "</p>";

    if (place.rating != null) {

        //console.log("rating=" + place.rating);

        html += "<p id='popupRating'>";

        var i;

        for (i = 0; i < Math.floor(place.rating); i++) {

            /* add full stars */
            html += "<i class=\"fa fa-star\"></i>";

        }

        for (var j = i; j < 5; j++) {

            /* add empty stars */
            html += "<i class=\"fa fa-star-o\"></i>";

        }

        html += "</p>";
    }

    html += "<div class='card' style='background-color: transparent; border-color: whitesmoke; margin-top: 10px'><br><p id='popupAddress'><i class='fa fa-street-view card-body'></i><a target='_blank' href='https://www.google.com/maps/dir/?api=1&origin=" + userCoordinates.userLatitude + ',' + userCoordinates.userLongitude + "&destination=QVB&destination_place_id=" + place['place_id'] + "&travelmode=walking' style = 'color : whitesmoke; '>" + place['vicinity'] + "</a></p>";

    if (place.website != null) {

        html += "<p id='popupWebsite' class='card-body'><i class='fa fa-at'></i><a target='_blank' href='" + place.website + "' style = 'color : whitesmoke; '>Website</a></p>";

    } else if (place.url != null) {

        html += "<p id='popupUrl' class='card-body'><i class='fa fa-at'></i><a target='_blank' href='" + place.url + "' style = 'color : whitesmoke; '>Website</a></p>";

    }

    if (place['formatted_phone_number'] != null) {

        html += "<p id='popupPhone'><i class='fa fa-phone card-body'></i><a href=\"tel:" + place['formatted_phone_number'] + "\"style = 'color : whitesmoke; '>" + place['formatted_phone_number'] + "</a></p>";

    }

    if (place["opening_hours"] != null) {

        var days = JSON.parse(place["opening_hours"])["weekday_text"];

        if (days != null) {

            html += "<p id='popupWeekday'>";

            var d = new Date();

            var day = d.getDay();

            if( forcedDate != null ) {

                day = forcedDate;

            }

            //In JavaScript, the first day of the week (0) means Sunday
            // getDay()			days[]
            // 0 Sunday			Monday
            // 1 Monday			Tuesday
            // 2 Tuesday		Wednesday
            // 3 Wednesday		Thursday
            // 4 Thursday		Friday
            // 5 Friday			Saturday
            // 6 Saturday		Sunday

            var str = days[day];

            if (day === 0) {

                str = days[6];

            } else {

                str = days[day - 1];

            }

            if( forcedDate == null ) {

                //str.indexOf( ': ' )+2 => starts after ': '
                html += "<p class='day card-body'><i class='fa fa-clock-o'></i>Today: " + str.substring(str.indexOf(': ') + 2, str.length) + "</p>";

            } else {

                //str.indexOf( ': ' )+2 => starts after ': '
                html += "<p class='day card-body'><i class='fa fa-clock-o'></i>" + str + "</p>\n";

            }


        }

    }

    if ( place.price != null ) {



    }

    html+= "</div>";

    if ( place.subtypes != null && place.subtypes != "null") {

    	var subtypesToDisplay = JSON.parse(place.subtypes);

    	for (var i = 0 ; i < subtypesToDisplay.length ; i++) {


            html += "<button type=\"button\" class='btn btn-light subtypesButton' id='subtypes" + i + "' style=' margin-right: 5px; margin-top: 5px'>" + subtypesToDisplay[i].title + "</button>";

    	}

    }

    return html;

}


//######################################################################################################################
//##################### PARAMETERS #####################################################################################
//######################################################################################################################
//----------------------------------------------------------------------------------------------------------------------
// setStyleMap() :
//
//  Change the style of map
//
// INPUT :
//
//  content -> the name of map's style
//
// OUTPUT :
//
//
//----------------------------------------------------------------------------------------------------------------------
function setStyleMap(content) {

    map.setStyle('mapbox://styles/mapbox/' + content + '-v9');

}

//######################################################################################################################
//############ FILTER ACTIONS ON MAP ###################################################################################
//######################################################################################################################
//----------------------------------------------------------------------------------------------------------------------
// filterMap() :
//
//  Prepare a filter object based on what is currently selected in the filters menu, then call filterFunction( filter )
//----------------------------------------------------------------------------------------------------------------------

function filterMap() {

    resetFilter();

    var restaurantButton = document.getElementById("restaurantButton");

    var barButton = document.getElementById("barButton");

    var barRestaurantButton = document.getElementById("barRestaurantButton");


    var typeButtons = [restaurantButton, barButton, barRestaurantButton];

    var priceButton1 = document.getElementById("priceButton1");

    var priceButton2 = document.getElementById("priceButton2");

    var priceButton3 = document.getElementById("priceButton3");

    var priceButton4 = document.getElementById("priceButton4");


    var priceButtons = [priceButton1, priceButton2, priceButton3, priceButton4];


    var starButton1 = document.getElementById("starButton1");

    var starButton2 = document.getElementById("starButton2");

    var starButton3 = document.getElementById("starButton3");

    var starButton4 = document.getElementById("starButton4");

    var starButton5 = document.getElementById("starButton5");


    var starButtons = [starButton1, starButton2, starButton3, starButton4, starButton5];


    var aroundMeButton = document.getElementById("aroundMe");

    var openedNowButton = document.getElementById("openedNow");

    var openingHoursInput = document.getElementById("inputTime");


    var filter = {

        filteringTypes : false,

        types: [false, false, false],

        filteringPrices : false,

        price: [],

        rating: null,

        aroundMe: false,

        opened: false,

        openingHours: null

    };

    //~ console.log(filter);

    var i;

    for (i = 0; i < typeButtons.length; i++) {

        var clicked = $(typeButtons[i]).data().clicked;

        if( clicked ) {

            filter.types[i] = clicked;

            filter.filteringTypes = true;

        }

    }


    for (i = 0; i < priceButtons.length; i++) {

        if ($(priceButtons[i]).data().clicked) {

            filter.price.push(i + 1);

            filter.filteringPrices = true;

        }

    }

    for (i = 1; i < starButtons.length && $(starButtons[i]).data().clicked; i++) {

        filter.rating = i + 1;

    }

    filter.aroundMe = aroundMeButton.checked;

    filter.opened = openedNowButton.checked;

    if ( openingHoursInput.value.length !== 0 ) {

        filter.openingHours = openingHoursInput.value;

    }

    //console.log(filter);

    console.log(filter);

    filterFunction(filter);

}

//----------------------------------------------------------------------------------------------------------------------
// filterFunction ( filter ) :
//
//  Apply a filter to the geojsonSource property based on the passed filter's properties
//
//  If only one object is left after filtering, we fly and zoom to it in the map
//----------------------------------------------------------------------------------------------------------------------

function filterFunction(filter) {

    var filteredGeojson = JSON.parse(geojsonSource);

    var features = filteredGeojson.features;

    if( filter.filteringTypes ) {

        features = filteredGeojson.features.filter(function (value) {

            var values = ['Restaurant', 'Bar', 'Bar-Restaurant'];

            var bool = false;

            for (var i = 0; i < filter.types.length; i++) {

                if (filter.types[i] == true) {

                    bool = bool || value.properties.mainType == values[i];

                }

            }

            return bool;

        });

    }

    if( filter.rating != null ){

        features = features.filter( function (value) {

            return Math.floor(value.properties.rating) == filter.rating;

        });

    }

    if( filter.aroundMe ) {

        map.flyTo({center : [userCoordinates.userLongitude, userCoordinates.userLatitude]});

        features = features.filter( function (value) {

            return ( value.properties.geometry.location.lat <= userCoordinates.userLatitude + 2*latVariance
                && value.properties.geometry.location.lat >= userCoordinates.userLatitude - 2*latVariance
                && value.properties.geometry.location.lng <= userCoordinates.userLongitude + 2*lngVariance
                && value.properties.geometry.location.lng >= userCoordinates.userLongitude - 2*lngVariance);

        });

    }

    if( filter.opened ) {

        features = features.filter( function (value) {

            var date = new Date();

            var day = date.getDay();

            if( day == 0 ) {

                day = 6;

            } else {

                day --;

            }

            var hour = date.getHours();

            var minutes = date.getMinutes();

            var time = hour * 100 + minutes;

            var openingHours = value.properties["opening_hours"];

            if( openingHours != null ) {

                var periods = value.properties["opening_hours"]["periods"];

                if ( periods != null ) {

                    var openings = [];

                    var closings = [];

                    for (var i = 0; i < periods.length ; i ++ ) {

                        if ( periods[i]["close"] != null && periods[i]["open"] != null && periods[i]["close"]["day"] == day && periods[i]["open"]["day"] == day) {

                            openings.push(periods[i]["open"]["time"]);

                            closings.push(periods[i]["close"]["time"]);

                        }

                    }

                    for (var i = 0; i < openings.length ; i ++) {

                        if ( openings[i] <= time && time <= closings[i] ) {

                            return true;

                        }

                    }

                } else {

                    return false;

                }

            } else {

                return false;

            }

            return false;

        });

    }

    if ( filter.openingHours !== null ) {

        var str = document.getElementById("inputTime").value;

        var hour = str.substring(0, str.length - str.indexOf(':')-1);

        var minute = str.substring(str.indexOf(':')+1, str.length);

        /* get the field "openingHours" from the variable filter */
        if( filter.openingHours ) {

            features = filteredGeojson.features.filter(function (value) {

                var values = [hour];

                var bool = false;

                for (var i = 0; i < filter.openingHours.length; i++) {

                    if (filter.openingHours[i] === hour) {

                        bool = bool || value.properties.openingHours === hour;

                    }

                }

                console.log("return is applied..;");

                return bool;

            });

        }

        console.log("filter is applied...");

    }

    if( filter.filteringPrices == true ) {

        features = features.filter( function (value) {

            if( value.properties.price != null ) {

                for (var i = 0; i < filter.price.length ; i++) {

                    if ( value.properties.price.length == filter.price[i] ) {

                        return true;

                    }

                }

                return false;

            } else {

                return false;

            }

        });

    }

    filteredGeojson.features = features;

    map.getSource('places').setData(filteredGeojson);

    if ( filteredGeojson.features.length == 1 ) {

        map.flyTo({center : filteredGeojson.features[0].geometry.coordinates});

    }

}

//----------------------------------------------------------------------------------------------------------------------

function filterDate(filter) {

    var str = document.getElementById("#inputTime").value;

    var hour = str.substring(0, str.length - str.indexOf(':')-1);

    var minute = str.substring(str.indexOf(':')+1, str.length);


    var filteredGeojson = JSON.parse(geojsonSource);

    var features = filteredGeojson.features;

    if( filter.filteringTypes ) {

        features = filteredGeojson.features.filter(function (value) {

            var values = [hour];

            var bool = false;

            for (var i = 0; i < filter.types.length; i++) {

                if (filter.types[i] == true) {

                    bool = bool || value.properties.type == values[i];

                }

            }

            return bool;

        });

    }

}

//----------------------------------------------------------------------------------------------------------------------
// resetFilter() :
//
//  Removes all current filters by setting the original geojsonSource
//----------------------------------------------------------------------------------------------------------------------

function resetFilter() {

    for(var i = 0; i < popups.length ; i++) {

        popups[i].remove();

    }

    forcedDate = null;

    map.getSource('places').setData(JSON.parse(geojsonSource));

}

//----------------------------------------------------------------------------------------------------------------------
// filterSearch( searchString ) :
//
//  Reset the current filters then applies filter on the geojson looking in addresses, names, subtypes, main types
//
//  If the searchString is empty, it just resets the filters
//----------------------------------------------------------------------------------------------------------------------

function filterSearch( searchString ) {

    resetFilter();

    if (searchString.length !== 0) {

        var filteredGeojson = JSON.parse(geojsonSource);

        var features = filteredGeojson.features;

        var optionRegex = new RegExp(/!/);

        if( searchString.search(optionRegex) == -1 ) {

            features = features.filter(function (value) {

                var valueName = accent_fold(value.properties.name).toLowerCase();

                var valueType = accent_fold(value.properties.mainType).toLowerCase();

                var valueAddress = accent_fold(value.properties["vicinity"]).toLowerCase();

                var searchName = accent_fold(searchString).toLowerCase();

                var reviews = accent_fold(value.properties.reviews).toLowerCase();

                var subtype = false;

                if( value.properties.subtypes != null ) {

                    for (var l = 0  ; l < value.properties.subtypes.length; l++) {

                        var elem = value.properties.subtypes[l];

                        if( accent_fold(elem.alias).indexOf(searchName) != -1 || accent_fold(elem.title.toLowerCase()).indexOf(searchName) != -1 ) {

                            subtype = true;

                            break;

                        }

                    }

                }

                return (reviews.indexOf(searchName) != -1 || valueName.indexOf(searchName) != -1 || valueAddress.indexOf(searchName) != -1 || valueType.indexOf(searchName) != -1 || subtype);

            });

        } else {

            var openRegex = new RegExp(/open/);

            if( searchString.search( openRegex ) != -1 ) {

                features = features.filter( function (value) {

                    var sundayRegex = new RegExp(/sunday|dimanche/);

                    var mondayRegex = new RegExp(/monday|lundi/);

                    var tuesdayRegex = new RegExp(/tuesday|mardi/);

                    var wednesdayRegex = new RegExp(/wednesday|mercredi/);

                    var thursdayRegex = new RegExp(/thursday|jeudi/);

                    var fridayRegex = new RegExp(/friday|vendredi/);

                    var saturdayRegex = new RegExp(/saturday|samedi/);

                    var regexes = [ sundayRegex, mondayRegex, tuesdayRegex, wednesdayRegex, thursdayRegex, fridayRegex, saturdayRegex ];

                    for(var i = 0; i < regexes.length ; i++) {

                        if ( searchString.search( regexes[i] ) != -1 ) {

                            if( value.properties.weekday_text != null && i < value.properties.weekday_text.length ) {

                                forcedDate = i;

                                var openingHours = value.properties.weekday_text[ i ];

                                return openenedFilter( openingHours );

                            } else {

                                return false;

                            }

                        }

                    }

                    return false;

                });

            }

        }

        filteredGeojson.features = features;

        map.getSource('places').setData(filteredGeojson);

        if ( filteredGeojson.features.length == 1 ) {

            map.flyTo({center : filteredGeojson.features[0].geometry.coordinates});

        }

    } else {

        resetFilter();

    }

}

//######################################################################################################################
//############### DATA RETRIEVER AND JSON'S CREATION ###################################################################
//######################################################################################################################

var fetchedBars= [];

var barsString = "";

var fetchedRestaurants = [];

var restaurantsString = "";

var fetchedBarRestaurants = [];

var barsRestaurantsString = "";

var placesRequest;          // Google places API request

var counter;                // Simple counter for tasks

//----------------------------------------------------------------------------------------------------------------------
// fetchAllPlaceRadar ( timeInterval ) :
//
//  This will retrieves all places ids from google's method radarSearch, then it'll call getDetailsAfterRadar()
//
//  Intern radar search requests callbacks are handled with radarSquareCallBack() methods
//----------------------------------------------------------------------------------------------------------------------

function fetchAllPlaceRadar( timeInterval ) {

    var allPlacesId = [];

    counter = 0;

    var lngStep = lngVariance * 7;

    var latStep = latVariance * 7;

    var baseBounds = {

        north: 45.788347,

        west: 4.791173,

        south: 45.788347 - latStep,

        east: 4.791173 + lngStep

    };

    var bounds = {

        north: 45.788347,

        west: 4.791173,

        south: 45.788347 - latStep,

        east: 4.791173 + lngStep

    };

    var i = 1;

    console.log( "Crawling on lyon..." );

    var interval = setInterval( function () {

        if ( bounds.north < mapGridBounds.bottomLatitude - latVariance ) {

            console.log( "All data retrieved" );

            console.log(JSON.stringify(allPlacesId));

            getDetailsAfterRadar( allPlacesId, 2000 );

            clearInterval( interval );

        } else {

            var sw = new google.maps.LatLng( bounds.south.toFixed( 6 ), bounds.west.toFixed( 6 ) );

            var ne = new google.maps.LatLng( bounds.north.toFixed( 6 ), bounds.east.toFixed( 6 ) );

            var radarBounds = new google.maps.LatLngBounds( sw, ne );

            placesRequest = {

                bounds : radarBounds,

                type : "bar"

            };

            googlePlacesAPIService.radarSearch( placesRequest, function ( results, status ) {

                radarSquareCallBack( results, status, allPlacesId, i );

            } );

            placesRequest = {

                bounds : radarBounds,

                type : "restaurant"

            };

            googlePlacesAPIService.radarSearch( placesRequest, function ( results, status ) {

                radarSquareCallBack( results, status, allPlacesId, i );

            } );

            // test markers
            /*~
                    console.log( bounds );

                    var position = new mapboxgl.LngLat( bounds.west.toFixed( 6 ), bounds.north.toFixed( 6 ) );

                    new  mapboxgl.Marker().setLngLat( position ).addTo( map );

                    position = new mapboxgl.LngLat( bounds.west.toFixed( 6 ), bounds.south.toFixed( 6 ) );

                    new  mapboxgl.Marker().setLngLat( position ).addTo( map );

                    position = new mapboxgl.LngLat( bounds.east.toFixed( 6 ), bounds.north.toFixed( 6 ) );

                    new  mapboxgl.Marker().setLngLat( position ).addTo( map );

                    position = new mapboxgl.LngLat( bounds.east.toFixed( 6 ), bounds.south.toFixed( 6 ) );

                    new  mapboxgl.Marker().setLngLat( position ).addTo( map );
            */

            if ( bounds.west > mapGridBounds.rightLongitude ) {

                bounds.west = baseBounds.west;

                bounds.east = bounds.west + lngStep;

                bounds.north -= latStep;

                bounds.south -= latStep;

            } else {

                bounds.west += lngStep;

                bounds.east += lngStep;

            }

            i++;

        }

    }, timeInterval );

}

//----------------------------------------------------------------------------------------------------------------------
// radarSquareCallBack ( results, status, array, i ) :
//
//  Callback that constructs the place_ids array
//
// INPUT :
//
//  results -> a JSON formatted response from google containing a place_id
//  status -> request status after the call
//  i -> a counter used to track progress of the task
//
// INPUT/OUTPUT :
//
//  array -> an array containing all place_id
//----------------------------------------------------------------------------------------------------------------------

function radarSquareCallBack( results, status, array, i ) {

    i--;

    console.log( "Fetching zones : " + i + " / 31 ... Status : " + status );

    if ( status === google.maps.places.PlacesServiceStatus.OK ) {

        //~ console.log( results );

        for ( var i = 0 ; i < results.length ; i++ ) {

            array.push( results[i]["place_id"] );

        }

    }

    //~ console.log( array.toString() );

}

//----------------------------------------------------------------------------------------------------------------------
// getDetailsAfterRadar( placeIds, timeInterval ) :
//
//  Call google's getPlaceDetails then build a json string for each type based on constructed arrays by callbacks
//
//  containing all data
//
// INPUT :
//
//  placeIds -> an array full of place_id
//  timeInterval -> time in milliseconds between two requests
//----------------------------------------------------------------------------------------------------------------------

function getDetailsAfterRadar( placeIds, timeInterval ) {

    var i = 1;

    var interval = setInterval( function () {

        if ( i % 100 === 0 ) {

            console.log( "Bars : " );
            console.log( fetchedBars );
            console.log( "Bar Restaurants : " );
            console.log( fetchedBarRestaurants );
            console.log( "Restaurants : " );
            console.log( fetchedRestaurants );
            console.log( "Total : " );
            console.log( fetchedBarRestaurants.length + fetchedBars.length + fetchedRestaurants.length );

        }

        if ( i >= placeIds.length ) {

            clearInterval( interval );

            for ( var j = 0 ; j < fetchedBars.length ; j ++ ) {

                barsString += JSON.stringify( fetchedBars[j] );

                if ( j !== fetchedBars.length - 1 ) {

                    barsString += ",";

                }

            }

            for ( j = 0 ; j < fetchedRestaurants.length ; j ++ ) {

                restaurantsString += JSON.stringify( fetchedRestaurants[j] );

                if ( j !== fetchedRestaurants.length - 1 ) {

                    restaurantsString += ",";

                }

            }

            for ( j = 0 ; j < fetchedBarRestaurants.length ; j ++ ) {

                barsRestaurantsString += JSON.stringify( fetchedBarRestaurants[j] );

                if ( j !== fetchedBarRestaurants.length - 1 ) {

                    barsRestaurantsString += ",";

                }

            }

            console.log( "All details retrieved" );

        } else {

            var detailsRequest = {

                placeId : placeIds[i]

            };

            googlePlacesAPIService.getDetails( detailsRequest, function ( results, status ) {

                if ( status === "OVER_QUERY_LIMIT" ) {

                    console.log( "State " + i + ", interruption" );

                    clearInterval( interval );

                    for ( var j = 0 ; j < fetchedBars.length ; j ++ ) {

                        barsString += JSON.stringify( fetchedBars[j] );

                        if ( j !== fetchedBars.length - 1 ) {

                            barsString += ",";

                        }

                    }

                    for ( j = 0 ; j < fetchedRestaurants.length ; j ++ ) {

                        restaurantsString += JSON.stringify( fetchedRestaurants[j] );

                        if ( j !== fetchedRestaurants.length - 1 ) {

                            restaurantsString += ",";

                        }

                    }

                    for ( j = 0 ; j < fetchedBarRestaurants.length ; j ++ ) {

                        barsRestaurantsString += JSON.stringify( fetchedBarRestaurants[j] );

                        if ( j !== fetchedBarRestaurants.length - 1 ) {

                            barsRestaurantsString += ",";

                        }

                    }

                } else {

                    getDetailsCallback( results, status, fetchedBars, fetchedRestaurants, fetchedBarRestaurants, i, placeIds.length );

                }

            } );

            i++;

        }

    }, timeInterval );

}

//----------------------------------------------------------------------------------------------------------------------
// getDetailsCallback ( result, status, bars, restaurants, barRestaurants, state, progression ) :
//
//  Callback of google's getDetails methods, fills arrays of bars, restaurants and bar-restaurants
//
// INPUT :
//
//  results -> a JSON formatted response from google containing a place_id
//  status -> request status after the call
//  state -> a counter used to track progress of the task
//  progression -> total of requests to proceed
//
// INPUT/OUTPUT :
//
//  bars -> an array containing all bars
//  restaurants -> an array containing all restaurants
//  barRestaurants -> an array containing all barRestaurants
// ----------------------------------------------------------------------------------------------------------------------

function getDetailsCallback( result, status, bars, restaurants, barRestaurants, state , progression ) {

    state --;

    console.log( "Progression : " + state + " / " + progression + " ... Status : " + status );

    if ( status === google.maps.places.PlacesServiceStatus.OK ) {

        //~ console.log( "callback" );

        var actualPlace = result;

        var isBar = checkIfPlaceIsBar( actualPlace );

        var isRestaurant = checkIfPlaceIsRestaurant( actualPlace );

        if ( isBar && isRestaurant ) {

            actualPlace.mainType = "Bar-restaurant";

            barRestaurants.push( actualPlace );

        } else if ( isBar ) {

            actualPlace.mainType = "Bar";

            bars.push( actualPlace );

        } else if ( isRestaurant ) {

            actualPlace.mainType = "Restaurant";

            restaurants.push( actualPlace );

        }

    }

}

//----------------------------------------------------------------------------------------------------------------------
// checkIfPlaceIsBar ( place ) :
//
//  verify if passed place's types contains "bar"
//
// INPUT :
//
//  place -> a place retrieved with google's getDetails method
// ----------------------------------------------------------------------------------------------------------------------

function checkIfPlaceIsBar( place ) {

    for ( var i = 0 ; i < place.types.length ; i++ )
    {

        if ( place.types[i] === "bar" ) {

            return true;

        }

    }

    return false;

}

//----------------------------------------------------------------------------------------------------------------------
// checkIfPlaceIsRestaurant ( place ) :
//
//  verify if passed place's types contains "restaurant"
//
// INPUT :
//
//  place -> a place retrieved with google's getDetails method
// ----------------------------------------------------------------------------------------------------------------------

function checkIfPlaceIsRestaurant( place ) {

    for ( var i = 0 ; i < place.types.length ; i++ )
    {

        if ( place.types[i] === "restaurant" ) {

            return true;

        }

    }

    return false;

}

//######################################################################################################################
//############ JSON FILES LOADER AND GEOJSON GENERATION ################################################################
//######################################################################################################################

var loadedBarsString = "";

var loadedRestaurantsString = "";

var loadedBarsRestaurantsString = "";

var loadedYELPString = "";

var numberOfJSONLoadingCallbacks = 0;

//----------------------------------------------------------------------------------------------------------------------
// loadAllJSON () :
//
//  Loads all locally stored JSONs
//----------------------------------------------------------------------------------------------------------------------

function loadAllJSON() {

    loadBarsJSON();

    loadRestaurantsJSON();

    loadBarsRestaurantsJSON();

    loadYelpJSON();

}

//----------------------------------------------------------------------------------------------------------------------
// loadBarsJSON () :
//
//  Loads locally stored bars.json
//----------------------------------------------------------------------------------------------------------------------

function loadBarsJSON() {

    console.log("Retreiving Bars JSON...")

    var xobj = new XMLHttpRequest();

    xobj.overrideMimeType("application/json");

    xobj.open('GET', 'JSON/bars.json', true);

    xobj.onreadystatechange = function () {

        if (xobj.readyState === 4 && xobj.status == "200") {

            loadedBarsString = xobj.responseText;

            console.log("Success.");

            callbackLoadingJSON();

        }

    };

    xobj.send(null);

}

//----------------------------------------------------------------------------------------------------------------------
// loadRestaurantsJSON () :
//
//  Loads locally stored restaurants.json
//----------------------------------------------------------------------------------------------------------------------

function loadRestaurantsJSON() {

    console.log("Retreiving Restaurants JSON...")

    var xobj = new XMLHttpRequest();

    xobj.open('GET', 'JSON/restaurants.json', true);

    xobj.onreadystatechange = function () {

        if (xobj.readyState === 4 && xobj.status == "200") {

            loadedRestaurantsString = xobj.responseText;

            console.log("Success.");

            callbackLoadingJSON();

        }

    };

    xobj.send(null);

}

//----------------------------------------------------------------------------------------------------------------------
// loadBarsRestaurantsJSON () :
//
//  Loads locally stored barsRestaurants.json
//----------------------------------------------------------------------------------------------------------------------

function loadBarsRestaurantsJSON() {

    console.log("Retreiving Bar-Restaurants JSON...")

    var xobj = new XMLHttpRequest();

    xobj.open('GET', 'JSON/barsRestaurants.json', true);

    xobj.onreadystatechange = function () {

        if (xobj.readyState === 4 && xobj.status == "200") {

            loadedBarsRestaurantsString = xobj.responseText;

            console.log("Success.");

            callbackLoadingJSON();

        }

    };

    xobj.send(null);

}

//----------------------------------------------------------------------------------------------------------------------
// loadYelpJSON () :
//
//  Loads locally stored jsonBusinessYELP.json
//----------------------------------------------------------------------------------------------------------------------

function loadYelpJSON() {

    console.log("Retreiving Yelp JSON...")

    var xobj = new XMLHttpRequest();

    xobj.open('GET', 'JSON/jsonBusinessYELP.json', true);

    xobj.onreadystatechange = function () {

        if (xobj.readyState === 4 && xobj.status == "200") {

            var yelpJSON = JSON.parse(xobj.responseText);

            for (var i = 0; i < yelpJSON.length ; i++) {

                if( yelpJSON[i]['display_phone'] != null ) {

                    yelpJSON[i]['display_phone'] = yelpJSON[i]['display_phone'].replace('+33 ', '0');

                }

            }

            loadedYELPString = JSON.stringify(yelpJSON);

            console.log("Success.");

            callbackLoadingJSON();

        }

    };

    xobj.send(null);

}

//----------------------------------------------------------------------------------------------------------------------
// callbackLoadingJSON () :
//
//  Callback of loading JSON methods, when all
//----------------------------------------------------------------------------------------------------------------------

function callbackLoadingJSON() {

    numberOfJSONLoadingCallbacks++;

    if (numberOfJSONLoadingCallbacks === 4) {

        generateGeoJSON();

    }

}

//----------------------------------------------------------------------------------------------------------------------
// generateGeoJSON () :
//
//  Parses all retrieved JSON strings files then starts to build the geojson string and cleans it
//----------------------------------------------------------------------------------------------------------------------

function generateGeoJSON() {

    console.log("Generating geojson with google data...");

    var parsedBars = JSON.parse(loadedBarsString);

    var parsedRestaurants = JSON.parse(loadedRestaurantsString);

    var parsedBarRestaurants = JSON.parse(loadedBarsRestaurantsString);

    var geoJSONString = "{\"type\" : \"FeatureCollection\", \"features\":[";

    var geoJSONItem = {

        "type": "Feature",

        "geometry": {

            "type": "Point",

            "coordinates": [null, null]

        },

        "properties": {

            "formatted_address": null,

            "formatted_phone_number": null,

            "geometry": {

                "location": {

                    "lat": null,

                    "lng": null

                }

            },

            "place_id": null,

            "name": null,

            "scope": "GOOGLE",

            "vicinity": null,

        }

    };

    for (var i = 0; i < parsedBars.length; i++){

        geoJSONItem.geometry.coordinates = [parsedBars[i].geometry.location.lng, parsedBars[i].geometry.location.lat];

        geoJSONItem.geometry.name = parsedBars[i].name;

        geoJSONItem.properties.formatted_address = parsedBars[i].formatted_address;

        geoJSONItem.properties.formatted_phone_number = parsedBars[i].formatted_phone_number;

        geoJSONItem.properties.geometry.location.lat = parsedBars[i].geometry.location.lat;

        geoJSONItem.properties.geometry.location.lng = parsedBars[i].geometry.location.lng;

        geoJSONItem.properties.place_id = parsedBars[i].place_id;

        geoJSONItem.properties.name = parsedBars[i].name;

        geoJSONItem.properties.vicinity = parsedBars[i].vicinity;

        geoJSONItem.properties.mainType = parsedBars[i].mainType;

        if( parsedBars[i].rating != null ) {

            geoJSONItem.properties.rating = parsedBars[i].rating;

        }

        if( parsedBars[i].reviews != null ) {

            var reviews = parsedBars[i].reviews;

            var text = "";

            for ( var j = 0 ; j < reviews.length ; j++ ){

                text += reviews[j]['text'];

            }

            geoJSONItem.properties.reviews = text;


        }

        if ( parsedBars[i].opening_hours != null ) {

            geoJSONItem.properties.opening_hours = parsedBars[i].opening_hours;

        }

        if (parsedBars[i].url != null ) {

            geoJSONItem.properties.url = parsedBars[i].url;

        }

        if ( parsedBars[i].website != null ) {

            geoJSONItem.properties.website = parsedBars[i].website;

        }

        geoJSONString += JSON.stringify(geoJSONItem);

        if (i < parsedBars.length - 1) {

            geoJSONString += ',';

        }
    }

    geoJSONString += ',';

    for (var i = 0; i < parsedBarRestaurants.length; i++) {

        geoJSONItem.geometry.coordinates = [parsedBarRestaurants[i].geometry.location.lng, parsedBarRestaurants[i].geometry.location.lat];

        geoJSONItem.geometry.name = parsedBarRestaurants[i]["name"];

        geoJSONItem.properties.formatted_address = parsedBarRestaurants[i].formatted_address;

        geoJSONItem.properties.formatted_phone_number = parsedBarRestaurants[i].formatted_phone_number;

        geoJSONItem.properties.geometry.location.lat = parsedBarRestaurants[i].geometry.location.lat;

        geoJSONItem.properties.geometry.location.lng = parsedBarRestaurants[i].geometry.location.lng;

        geoJSONItem.properties.place_id = parsedBarRestaurants[i].place_id;

        geoJSONItem.properties.name = parsedBarRestaurants[i].name;

        geoJSONItem.properties.vicinity = parsedBarRestaurants[i].vicinity;

        geoJSONItem.properties.mainType = parsedBarRestaurants[i].mainType;

        if( parsedBarRestaurants[i].rating != null ) {

            geoJSONItem.properties.rating = parsedBarRestaurants[i].rating;

        }

        if( parsedBarRestaurants[i].reviews != null ) {

            var reviews = parsedBarRestaurants[i].reviews;

            var text = "";

            for ( var j = 0 ; j < reviews.length ; j++ ){

                text += reviews[j]['text'];

            }

            geoJSONItem.properties.reviews = text;


        }

        if ( parsedBarRestaurants[i].opening_hours != null ) {

            geoJSONItem.properties.opening_hours = parsedBarRestaurants[i].opening_hours;

        }

        if (parsedBarRestaurants[i].url != null ) {

            geoJSONItem.properties.url = parsedBarRestaurants[i].url;

        }

        if ( parsedBarRestaurants[i].website != null ) {

            geoJSONItem.properties.website = parsedBarRestaurants[i].website;

        }

        geoJSONString += JSON.stringify(geoJSONItem);

        if (i < parsedBarRestaurants.length - 1) {

            geoJSONString += ',';

        }

    }

    geoJSONString += ',';

    for (var i = 0; i < parsedRestaurants.length; i++) {

        geoJSONItem.geometry.coordinates = [parsedRestaurants[i].geometry.location.lng, parsedRestaurants[i].geometry.location.lat];

        geoJSONItem.geometry.name = parsedRestaurants[i]["name"];

        geoJSONItem.properties.formatted_address = parsedRestaurants[i].formatted_address;

        geoJSONItem.properties.formatted_phone_number = parsedRestaurants[i].formatted_phone_number;

        geoJSONItem.properties.geometry.location.lat = parsedRestaurants[i].geometry.location.lat;

        geoJSONItem.properties.geometry.location.lng = parsedRestaurants[i].geometry.location.lng;

        geoJSONItem.properties.place_id = parsedRestaurants[i].place_id;

        geoJSONItem.properties.name = parsedRestaurants[i].name;

        geoJSONItem.properties.vicinity = parsedRestaurants[i].vicinity;

        geoJSONItem.properties.mainType = parsedRestaurants[i].mainType;

        if( parsedRestaurants[i].rating != null ) {

            geoJSONItem.properties.rating = parsedRestaurants[i].rating;

        }

        if( parsedRestaurants[i].reviews != null ) {

            var reviews = parsedRestaurants[i].reviews;

            var text = "";

            for ( var j = 0 ; j < reviews.length ; j++ ){

                text += reviews[j]['text'];

            }

            geoJSONItem.properties.reviews = text;


        }

        if ( parsedRestaurants[i].opening_hours != null ) {

            geoJSONItem.properties.opening_hours = parsedRestaurants[i].opening_hours;

        }

        if (parsedRestaurants[i].url != null ) {

            geoJSONItem.properties.url = parsedRestaurants[i].url;

        }

        if ( parsedRestaurants[i].website != null ) {

            geoJSONItem.properties.website = parsedRestaurants[i].website;

        }

        geoJSONString += JSON.stringify(geoJSONItem);

        if (i < parsedRestaurants.length - 1) {

            geoJSONString += ',';

        }

    }

    geoJSONString += ']}';

    console.log("Success.");

    //DEBUG DISPLAY
    //console.log(geoJSONString);

    cleanGeoJSON(geoJSONString);

}

//----------------------------------------------------------------------------------------------------------------------
// cleanGeoJSON ( geoJSONString ) :
//
//  Cleans the passed geoJSONString from doublons then launches the yelp fusion procedure
//
// INPUT :
//
//  geoJSONString -> a geojson string
//----------------------------------------------------------------------------------------------------------------------

function cleanGeoJSON( geoJSONString ) {

    console.log("Cleaning geojson from doublons...");

    var geoPlacesJSON = JSON.parse(geoJSONString)["features"];

    //~ console.log(geoPlacesJSON);

    var newPlaces = [];

    var ids = [];

    var doublons = 0;

    for (var i in geoPlacesJSON) {

        if (ids.indexOf(geoPlacesJSON[i].properties.place_id) === -1) {

            newPlaces.push(geoPlacesJSON[i]);

            ids.push(geoPlacesJSON[i].properties.place_id);

        } else {

            doublons++;

        }

    }

    var newGeoJSON = {

        type : "FeatureCollection",

        features : newPlaces

    };

    console.log("Found "+ doublons + " doublons.");

    console.log("Success.");

    fusionYelpGoogle(newGeoJSON);

}

//----------------------------------------------------------------------------------------------------------------------
// fusionYelpGoogle ( baseGeoJSON ) :
//
//  Add Yelp data to Google geojson's object presents in both google and yelp, then launches addYELPElements()
//
// INPUT :
//
//  baseGeoJSON -> a geojson string
//----------------------------------------------------------------------------------------------------------------------

function fusionYelpGoogle( baseGeoJSON ) {

    console.log("Starting yelp-google fusion...");

    console.log("Merging existing google elements with similar yelp elements...");

    var time = 50;

    var yelpJSON = JSON.parse(loadedYELPString);

    var i = 0;

    var geojsonBase = baseGeoJSON;

    console.log(yelpJSON.length);

    var interval = setInterval(function () {

        console.log("Progression : " + i + " / " + yelpJSON.length);

        if ( i >= yelpJSON.length ) {

            i = 0;

            console.log("Success.");

            addYELPElements(geojsonBase, yelpJSON);

            clearInterval(interval);

        } else {

            for (var j = 0; j < geojsonBase.features.length ; j++) {

                var yelpFormattedPhone = yelpJSON[i]['display_phone'];

                var yelpFormattedAddress = accent_fold(yelpJSON[i].location.address1.toLowerCase());


                var feature = geojsonBase.features[j].properties;


                var featureFormattedPhone = feature['formatted_phone_number'];

                var featureFormattedAddress = accent_fold(feature["formatted_address"].toLowerCase());

                if( featureFormattedPhone == yelpFormattedPhone
                    || featureFormattedAddress.indexOf(yelpFormattedAddress) != -1 ) {

                    if ( yelpJSON[i].categories != null ) {

                        feature.subtypes = yelpJSON[i].categories;

                    }

                    if ( yelpJSON[i].phone.length != 0 && featureFormattedPhone == null ) {

                        feature["formatted_phone_number"] = yelpFormattedPhone;

                    }

                    if( yelpJSON[i].price != null ) {

                        feature.price = yelpJSON[i].price;

                    }

                    if( yelpJSON[i].url != null && feature.url == null ) {

                        feature.website = yelpJSON[i].url;

                    }

                    yelpJSON.splice(i, 1);

                    break;

                }

            }

        }

        i++;

    }, time);

}

//----------------------------------------------------------------------------------------------------------------------
// addYELPElements ( geojsonBase, yelpJSON ) :
//
//  Add Yelp data to Google geojson's object not present in google, then launches cleanPositionDoublons()
//
// INPUT :
//
//  geojsonBase -> a google geojson string
//  yelpJSON -> a yelp JSON
//----------------------------------------------------------------------------------------------------------------------

function addYELPElements( geojsonBase, yelpJSON ) {

    console.log("Adding new yelp elements to google database...");

    for (var indice = 0 ; indice < yelpJSON.length; indice++) {

        var addedObject = {

            "type": "Feature",

            "geometry": {

                "type": "Point",

                "coordinates": [yelpJSON[indice].coordinates.longitude, yelpJSON[indice].coordinates.latitude],

                "name": yelpJSON[indice].name

            },

            "properties": {

                "formatted_address": yelpJSON[indice].location['display_address'],

                "formatted_phone_number": null,

                "geometry": {

                    "location": {

                        "lat": yelpJSON[indice].coordinates.latitude,

                        "lng": yelpJSON[indice].coordinates.longitude

                    }

                },

                "place_id": yelpJSON[indice].id,

                "name": yelpJSON[indice].name,

                "rating": yelpJSON[indice].rating,

                "scope": "YELP",

                "vicinity": yelpJSON[indice].location['display_address'][0],

                "mainType": "Bar-Restaurant"

            }

        };

        if( yelpJSON[indice]['display_phone'] != null ) {

            addedObject.properties['formatted_phone_number'] = yelpJSON[indice]['display_phone'];

        }

        if ( yelpJSON[indice].price != null ) {

            addedObject.properties.price = yelpJSON[indice].price;

        }

        if( yelpJSON[indice].categories != null) {

            addedObject.properties.subtypes = yelpJSON[indice].categories;

            for( var j = 0; j < yelpJSON[indice].categories.length ; j++ ) {

                if( yelpJSON[indice].categories[j].alias.indexOf('bars') != -1 ){

                    addedObject.mainType = "Bar";

                    break;

                } else if ( yelpJSON[indice].categories[j].alias.indexOf('restaurants') != -1 ) {

                    addedObject.mainType = "Restaurant";

                    break;

                }

            }

        }

        if( yelpJSON[indice].url != null ) {

            addedObject.properties.url = yelpJSON[indice].url;

        }


        geojsonBase.features.push(addedObject);

    }

    console.log("Success.");

    //console.log(JSON.stringify(geojsonBase));

    cleanPositionDoublons( geojsonBase );

}

//----------------------------------------------------------------------------------------------------------------------
// cleanPositionDoublons ( geoJSONSourceBase ) :
//
//  Cleans geojson to prevent from object's position duplicates, then set the geojsonSource gobal variable
//
// INPUT :
//
//  geoJSONSourceBase -> a geojson string
//----------------------------------------------------------------------------------------------------------------------

function cleanPositionDoublons( geoJSONSourceBase ) {

    console.log("Cleaning positions doublons...");

    var geoJSONParsed = geoJSONSourceBase;

    var features = geoJSONParsed.features;

    for (var i = 0; i < features.length - 1; i++){

        console.log("Progression... " + i + " / " + features.length);

        for (var j = i + 1; j < features.length; j++) {

            if( features[i].properties.latitude == features[j].properties.latitude && features[i].properties.longitude == features[j].properties.longitude ) {

                if (features[i].properties["formatted_phone_number"] == features[j].properties["formatted_phone_number"]) {

                    features.splice(j, 1);

                } else {

                    features[i].properties.geometry.location.lat += 0.000010;

                    features[i].properties.geometry.location.lng += 0.000010;

                    features[i].geometry.coordinates[0] = features[i].properties.geometry.location.lng;

                    features[i].geometry.coordinates[1] = features[i].properties.geometry.location.lat;

                    j = features.length;

                }

            }

        }

    }

    console.log("Success.");

    geojsonSource = JSON.stringify(geoJSONParsed);

}

//######################################################################################################################
//#### COPYRIGHTS @ NELLY BARRET & LOUIS LE BRUN - LIFPROJET 2018 ######################################################
//######################################################################################################################