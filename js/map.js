// Variables

var userCoordinates;        // User's coordinates

var searchOptions = 0;      // Search options: 0 = no filter ; 1 = Bars ; 2 = Restaurants

var map;                    // The map generated by mapbox

var userPositionMarker;     // Marker associated with user's location

var placesRequest;          // Google places API request

var placeInformations;      // Informations about places: contains ID, latitude and longitude, adress, rating, name, etc...

var JSONSaveFileName = "";  // Name of the JSON data file

var JSONFile;               // File that store JSON data

var locationsMarkers = [];  // Array with allthe markers

var bars = "";              // JSON String with bars

var restaurants = "";       // JSON String with restaurants

// Initialisation of user's location with coordinates of Lyon

userCoordinates = {

		userLatitude : 45.75717800533178,

		userLongitude : 4.83480298193669

}

// Update user's location

getUserLocation();

// Mapbox generation with API key authentication

mapboxgl.accessToken = 'pk.eyJ1IjoiYWd0ZXJyYWwiLCJhIjoiY2pkMjRnbjJkNWYwZDJ4bGdwMWlxODJiYSJ9.4W9g-Go5vHpL9UZmjnGj4g';

map = new mapboxgl.Map({

		container: 'map',

		center: [ userCoordinates.userLongitude, userCoordinates.userLatitude ],

		zoom: 14,

		style: 'mapbox://styles/mapbox/streets-v9'

});

// Creation of user marker on map

userPositionMarker = new mapboxgl.Marker().setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude]);

var markerHeight = 50, markerRadius = 10, linearOffset = 25;

var popupOffsets = {
		'top': [0, 0],
		'top-left': [0,0],
		'top-right': [0,0],
		'bottom': [0, -markerHeight],
		'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
		'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
		'left': [markerRadius, (markerHeight - markerRadius) * -1],
		'right': [-markerRadius, (markerHeight - markerRadius) * -1]
};

var popup = new mapboxgl.Popup({offset:popupOffsets})
		.setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude])
		.setHTML("<h1 class='popup'>Vous êtes ici</h1>")
		.addTo(map);

userPositionMarker.setPopup( popup );

userPositionMarker.addTo(map);

updateBars();

updateRestaurants();

//Functions

// getUserLocation : retrieves the user's location and watch location changes

function getUserLocation()
{

		if( navigator.geolocation )
		{

				navigator.geolocation.watchPosition(setUserCoordinates);

		}

}

// setUserCoordinates : fix the userCoordinates properties, center the map on the user's location and update the marker

function setUserCoordinates(position) {

		userCoordinates.userLatitude = position.coords.latitude;

		userCoordinates.userLongitude = position.coords.longitude;

		map.setCenter([userCoordinates.userLongitude, userCoordinates.userLatitude]);

		userPositionMarker.setLngLat([userCoordinates.userLongitude, userCoordinates.userLatitude]);

}

// updateJSONDataFile : update the JSON data file with nearby places

function updateBars()
{

		var location = new google.maps.LatLng(userCoordinates.userLatitude, userCoordinates.userLongitude);

		placesRequest = {

				location: location,

				radius: '5000',

				type: 'bar'

		}

		service = new google.maps.places.PlacesService(document.createElement('div'));

		service.nearbySearch(placesRequest, callbackBars);

}

function callbackBars(results, status) {

		locationsMarkers = [];

		bars = "[";

		if (status == google.maps.places.PlacesServiceStatus.OK) {

				for (var i = 0; i < results.length ; i++) {

						var actualPlace = results[i];

						placeInformations = {

								"id" : actualPlace['place_id'],

								"coordinates" : actualPlace['geometry']['location'],

								"adress" : actualPlace['vicinity'],

								"rating" : actualPlace['rating'],

								"opened" : "unknown",

								"name" : actualPlace ['name'],

								"type" : 'bar',

								//"photo" : actualPlace['photos']

						};

						if( actualPlace['opening_hours'] )
								placeInformations.opened = actualPlace['opening_hours']['open_now'];

						if(i == results.length - 1)
								bars += JSON.stringify(placeInformations) ;
						else
								bars += JSON.stringify(placeInformations) + ",";

				}

		}

		bars += "]";

		displayBars(bars);

}

function updateRestaurants()
{

		var location = new google.maps.LatLng(userCoordinates.userLatitude, userCoordinates.userLongitude);

		placesRequest = {

				location: location,

				radius: '5000',

				type: 'restaurant'

		}

		service = new google.maps.places.PlacesService(document.createElement('div'));

		service.nearbySearch(placesRequest, callbackRestaurants);

}

function callbackRestaurants(results, status) {

	locationsMarkers = [];

	restaurants = "[";

	if (status == google.maps.places.PlacesServiceStatus.OK) {

			for (var i = 0; i < results.length ; i++) {

					var actualPlace = results[i];

					placeInformations = {

							"id" : actualPlace['place_id'],

							"coordinates" : actualPlace['geometry']['location'],

							"adress" : actualPlace['vicinity'],

							"rating" : actualPlace['rating'],

							"opened" : "unknown",

							"name" : actualPlace ['name'],

							"type" : 'restaurant',

							//"photo" : actualPlace['photos']

					};

					if( actualPlace['opening_hours'] )
							placeInformations.opened = actualPlace['opening_hours']['open_now'];

					if(i == results.length - 1)
							restaurants += JSON.stringify(placeInformations) ;
					else
							restaurants += JSON.stringify(placeInformations) + ",";

			}

	}

	restaurants += "]";

	displayRestaurant(restaurants);

}

function clearMap()
{

	for(var i = 0; i < locationsMarkers.length; i++)
	{

		locationsMarkers[i].remove();

	}

	locationsMarkers = [];

}

function displayMarkersWithOptions(bars, restaurants)
{

	switch(searchOptions) {

		case 0:

			break;

		case 1:

			break;

		case 2:

			break;

		default:

			break;

	}

}

function displayBars(bars)
{

	var barsArray = JSON.parse(bars);

	for( var i = 0; i < barsArray.length; i++)
	{

		var actualBar = barsArray[i];

		var marker = new  mapboxgl.Marker().setLngLat(JSON.parse(JSON.stringify(actualBar['coordinates'])));

		var markerHeight = 50, markerRadius = 10, linearOffset = 25;

		var popupOffsets = {
			'top': [0, 0],
			'top-left': [0,0],
			'top-right': [0,0],
			'bottom': [0, -markerHeight],
			'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'left': [markerRadius, (markerHeight - markerRadius) * -1],
			'right': [-markerRadius, (markerHeight - markerRadius) * -1]
		};

		var popup = new mapboxgl.Popup({offset:popupOffsets})
			.setLngLat(actualBar['coordinates'])
			.setHTML(createMarkerPopupHTML(actualBar))
			.addTo(map);

		marker.setPopup( popup );

		locationsMarkers.push( marker );

		marker.addTo( map );

	}

}

function displayRestaurant(restaurants)
{

	var restaurantsArray = JSON.parse(restaurants);

	for( var i = 0; i < restaurantsArray.length; i++)
	{

		var actualRestaurant = restaurantsArray[i];

		var marker = new  mapboxgl.Marker().setLngLat(JSON.parse(JSON.stringify(actualRestaurant['coordinates'])));

		var markerHeight = 50, markerRadius = 10, linearOffset = 25;

		var popupOffsets = {
			'top': [0, 0],
			'top-left': [0,0],
			'top-right': [0,0],
			'bottom': [0, -markerHeight],
			'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
			'left': [markerRadius, (markerHeight - markerRadius) * -1],
			'right': [-markerRadius, (markerHeight - markerRadius) * -1]
			
		};

		var popup = new mapboxgl.Popup({offset:popupOffsets})
			.setLngLat(actualRestaurant['coordinates'])
			.setHTML(createMarkerPopupHTML(actualRestaurant))
			.addTo(map);

		marker.setPopup( popup );

		locationsMarkers.push( marker );

		marker.addTo( map );

	}

}

function createMarkerPopupHTML(place)
{

	var state = "fermé"

	if (place.opened)
	{

		state = "ouvert"

	}

	var html =
		"<p class='title'>" + place.name + "</p>"
		+ "<br><a class='textPopup'>" + place.type + "</a>"
		+ "<br><a class='linkPopup' target='_blank' href='https://www.google.com/maps/dir/?api=1&origin=" + userCoordinates.userLatitude + ',' + userCoordinates.userLongitude + "&destination=QVB&destination_place_id=" + place.id + "&travelmode=walking'>" + place.adress + "</a>"
		+ "<br><a class='textPopup'>Actuellement : " + state + "</a>"
		+ "<br><a class='textPopup'>Note : " + place.rating + "/5</a>"

	return html;

}

// Location button by mapbox
/*

map.addControl( new mapboxgl.GeolocateControl ({

	 positionOptions: {

			 enableHighAccuracy: true

	 },

	 trackUserLocation: true

}));*/